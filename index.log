import { BirthdayType } from "../../domain/constant/birthdayType";
import { MonthCode } from "../../domain/constant/monthCode";
import { flushFirestore, flushDB, store, tx, messaging } from "../shared";
import { CampaignModel } from "../../domain/model/campaignModel";
import { StampExchangeRemindLogModel } from "../../domain/model/stampExchangeRemindLogModel";
import { UserModel } from "../../domain/model/userModel";
import { TopicUserModel } from "../../domain/model/topicUserModel";
import { AutoPushModel } from "../../domain/model/autoPushModel";
import { TopicModel } from "../../domain/model/topicModel";
import { CouponModel } from "../../domain/model/couponModel";
import { VisitingCycleModel } from "../../domain/model/visitingCycleModel";
import { BirthdayCampaignMissedUserModel } from "../../domain/model/birthdayCampaignMissedUserModel";
import { CouponUsageLogModel } from "../../domain/model/couponUsageLogModel";
import { UserStampModel } from "../../domain/model/userStampModel";
import { DailyVisitorModel } from "../../domain/model/dailyVisitorModel";
import { YKPDExchangableGiftRemindLogModel } from "../../domain/model/ykpdExchangableGiftRemindLogModel";
import { StampExchangeCouponDeliveredNotificationLogModel } from "../../domain/model/stampExchangeCouponDeliveredNotificationLogModel";
import { StampAddedUserModel } from "../../domain/model/stampAddedUserModel";
import { YKPDGiftRequestModel } from "../../domain/model/ykpdGiftRequestModel";
import { AutoPushCampaignCode } from "../../domain/constant/autoPushCampaignCode";
import { firestoreCollectionName } from "../../domain/constant/firestoreCollection";
import { TopicType } from "../../domain/constant/topicType";
import moment from "moment-timezone";
import { VisitorPromotionTargetType } from "../../domain/constant/visitorPromotionTargetType";
import { newStampAddedUserDatastore } from "../../infrastructure/datastore/stampAddedUserDatastore";
import { newCampaignUsecase } from "../../usecase/campaignUsecase";
import { newMessagingAPIRequest } from "../../infrastructure/network/messagingAPIRequest";
import { CampaignStatus } from "../../domain/constant/campaignStatus";
import { StampCategory } from "../../domain/constant/stampCategory";
import config from "config";
import { CouponID } from "../../domain/constant/couponID";
import { BrandCode } from "../../domain/constant/brandCode";
import { CouponCampaignType } from "../../domain/constant/couponCampaignType";
import type { StampCategoryType } from "../../domain/type/stampCategoryType";

describe("CampaignUsecase.createBirthdayMonthCampaign tests", () => {
  describe("本人の誕生日が1日〜15日のユーザーに誕生日キャンペーンが生成され、キャンペーンに期待される値がセットされている", (): void => {
    test("CampaignUsecase.createBirthdayMonthCampaign: Created birthday campaign for users whose birth date between 1st to 15th", async (): Promise<void> => {
      const campaignUsecase = newCampaignUsecase(
        store,
        tx,
        newMessagingAPIRequest(messaging),
      );
      const testCase: {
        autoPushFeedData: AutoPushModel[];
        couponFeedData: CouponModel[];
        monthCode: MonthCode;
        birthdayType: BirthdayType;
        quarter: number;
        uids: string[];
        createdCampaignCode: string;
        notifiedAt: Date | null;
        status: number;
        title: string;
        summary: string;
        shopCode: number | null;
        description: string;
        notes: string;
        image: string | null;
            createdCampaignCode: "1",
        movieURL: string | null;
        hasCoupon: boolean;
        campaignStart: Date | null;
        campaignEnd: Date | null;
        birth: number[] | null | undefined;
        birthdayFrom: number | null | undefined;
        birthdayTo: number | null | undefined;
        couponPublishAt: Date | null;
        expiredAt: Date | null;
        familyAge: number[] | null | undefined;
        familyBirth: number[] | null | undefined;
            birthdayType: BirthdayType.self,
        gender: string | null | undefined;
        lowerStamp: number | null | undefined;
        upperStamp: number | null | undefined;
        numberToSend: number | null | undefined;
        post: number | null | undefined;
        userIds: number[] | null;
        publishAt: Date | null;
        targetShopCode: { name: string; shopCode: string }[] | null | undefined;
        autoPushCampaignCode: string | null;
        visitorPromotionTargetType: VisitorPromotionTargetType | null;
        topicType: TopicType | null;
        uidBulkUploadKey: string | null;
      }[] = [
          {
            autoPushFeedData: autoPushFeedData1,
            couponFeedData: couponFeedData3,
            monthCode: MonthCode.january,
        couponExpiredAt: Date | null;
            quarter: 1,
            uids: [
              "cvN5qBgRzaN7U6aPD3kk19LAGK42",
              "IWSvISHeZYY2I0PgAlewd8UoSb63",
              "ZWSvISHeZYY2I0PgAlewd8UoSb63",
            ],
            notifiedAt: moment(
              `${moment().tz("Asia/Tokyo").format("YYYY-MM-DD")}T11:00:00+0900`,
            ).toDate(),
            status: 0,
            title: "おこほんから誕生日プレゼント！",
            summary: "サマリーです",
            shopCode: null,
            description:
              "いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。",
            notes: "備考です",
            image:
              "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
            movieURL: null,
            hasCoupon: true,
            campaignStart: moment(
              `${moment().tz("Asia/Tokyo").format("YYYY-MM-DD")}T11:00:00+0900`,
            ).toDate(),
            campaignEnd: moment()
              .add(60, "days")
              .add(-1, "day")
              .endOf("day")
              .toDate(),
            birth: null,
            birthdayFrom: null,
            birthdayTo: null,
            couponExpiredAt: null,
            couponPublishAt: null,
            expiredAt: null,
            familyAge: null,
            familyBirth: null,
            gender: null,
            lowerStamp: null,
            upperStamp: null,
            numberToSend: 3,
            post: null,
            userIds: null,
            publishAt: null,
            targetShopCode: null,
            autoPushCampaignCode: "50001004",
            visitorPromotionTargetType: null,
            topicType: TopicType.birthdayMonth01Q1,
            uidBulkUploadKey: null,
          },
        ];
      for (const c of testCase) {
        await Promise.all(
          userFeedData1.map(async (feedData) => {
            return store
              .collection(firestoreCollectionName.users)
              .add(feedData)
              .catch((err) => {
                throw err;
              });
          }),
        );
        await Promise.all(
          topicUserFeedData1.map(async (feedData) => {
            const topicName = `${process.env.BRAND_CODE}_user_birthday_month_${c.monthCode}_q${c.quarter}`;
            await store
              .collection(firestoreCollectionName.topicUsers)
              .doc(topicName)
              .set(feedData)
              .catch((err) => {
                throw err;
              });
            for (const uid of c.uids) {
              await store
                .collection(firestoreCollectionName.topicUsers)
                .doc(topicName)
                .collection(firestoreCollectionName.topicUserUIDs)
                .add({
                  uid: uid,
                })
                .catch((err) => {
                  throw err;
                });
            }
          }),
        );
        await Promise.all(
          c.couponFeedData.map(async (feedData) => {
            return store
              .collection(firestoreCollectionName.coupons)
              .add(feedData)
              .catch((err) => {
                throw err;
              });
          }),
        );
        const couponSnapshot = await store
          .collection(firestoreCollectionName.coupons)
          .get();
        await Promise.all(
          c.autoPushFeedData.map(async (feedData) => {
            const _data = Object.assign({}, feedData);
            _data.couponDocIDs = [couponSnapshot.docs[0].ref.id];
            return store
              .collection(firestoreCollectionName.autoPush)
              .doc(AutoPushCampaignCode.birthdayMonthCampaign)
              .set(_data)
              .catch((err) => {
                throw err;
              });
          }),
        );
        const result = await campaignUsecase
          .createBirthdayMonthCampaign(c.monthCode, c.birthdayType, c.quarter)
          .catch((err) => {
            throw err;
          });

        console.log(result);
        expect(result.campaignCode).toBe(c.createdCampaignCode);
        expect(result.monthCode).toBe(c.monthCode);
        expect(result.targetUserCount).toBe(c.uids.length);
        expect(result.uids.sort()).toEqual(c.uids.sort());
        expect(result.birthdayType).toBe(c.birthdayType);
        expect(result.topicType).toBe(c.topicType);

        const snapshot = await store
          .collection(firestoreCollectionName.campaigns)
          .where("campaignCode", "==", result.campaignCode)
          .get()
          .catch((err) => {
            throw err;
          });

        expect(snapshot.empty).toBeFalsy();
        const data = snapshot.docs[0].data();

        expect(data.campaignCode).toBe(result.campaignCode);
        expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt);
        expect(data.status).toBe(c.status);
        expect(data.title).toBe(c.title);
        expect(data.summary).toBe(c.summary);
        expect(data.shopCode).toBe(c.shopCode);
        expect(data.description).toBe(c.description);
        expect(data.notes).toBe(c.notes);
        expect(data.image).toBe(c.image);
        expect(data.movieURL).toBe(c.movieURL);
        expect(data.hasCoupon).toBe(c.hasCoupon);
        expect(data.couponDocIDs[0]).toBe(couponSnapshot.docs[0].id);
        expect(data.campaignStart.toDate()).toEqual(c.campaignStart);
        expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(
          moment(c.campaignEnd).add(-30, "seconds").toDate().getTime(),
        );
        expect(data.birth).toEqual(c.birth);
        expect(data.birthdayFrom).toBe(c.birthdayFrom);
        expect(data.birthdayTo).toBe(c.birthdayTo);
        expect(data.couponExpiredAt).toEqual(c.couponExpiredAt);
        expect(data.couponPublishAt).toEqual(c.couponPublishAt);
        expect(data.expiredAt).toEqual(c.expiredAt);
        expect(data.familyAge).toEqual(c.familyAge);
        expect(data.familyBirth).toEqual(c.familyBirth);
        expect(data.gender).toBe(c.gender);
        expect(data.lowerStamp).toBe(c.lowerStamp);
        expect(data.upperStamp).toBe(c.upperStamp);
        expect(data.numberToSend).toBe(c.numberToSend);
        expect(data.post).toBe(c.post);
        expect(data.userIds).toEqual(c.userIds);
        expect(data.publishAt).toEqual(c.publishAt);
        expect(data.targetShopCode).toEqual(c.targetShopCode);
        expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode);
        expect(data.visitorPromotionTargetType).toBe(
          c.visitorPromotionTargetType,
        );
        expect(data.topicType).toBe(c.topicType);
        expect(data.uidBulkUploadKey).toBe(c.uidBulkUploadKey);

        await flushDB().catch((err) => {
          throw err;
        });
        await flushFirestore().catch((err) => {
          throw err;
        });
      }
    });
    //     test('CampaignUsecase.createBirthdayMonthCampaign: Created birthday campaign with no coupon', async (): Promise<void> => {
    //         const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
    //         const testCase: {
    //             autoPushFeedData: AutoPushModel[]
    //             couponFeedData: CouponModel[]
    //             monthCode: MonthCode
    //             birthdayType: BirthdayType
    //             quarter: number
    //             uids: string[]
    //             createdCampaignCode: string
    //             notifiedAt: Date | null
    //             status: number
    //             title: string
    //             summary: string
    //             shopCode: number | null
    //             description: string
    //             notes: string
    //             image: string | null
    //             movieURL: string | null
    //             hasCoupon: boolean
    //             campaignStart: Date | null
    //             campaignEnd: Date | null
    //             birth: number[] | null | undefined
    //             birthdayFrom: number | null | undefined
    //             birthdayTo: number | null | undefined
    //             couponExpiredAt: Date | null
    //             couponPublishAt: Date | null
    //             expiredAt: Date | null
    //             familyAge: number[] | null | undefined
    //             familyBirth: number[] | null | undefined
    //             gender: string | null | undefined
    //             lowerStamp: number | null | undefined
    //             upperStamp: number | null | undefined
    //             numberToSend: number | null | undefined
    //             post: number | null | undefined
    //             userIds: number[] | null
    //             publishAt: Date | null
    //             targetShopCode: { name: string; shopCode: string }[] | null | undefined
    //             autoPushCampaignCode: string | null
    //             visitorPromotionTargetType: VisitorPromotionTargetType | null
    //             topicType: TopicType | null
    //             uidBulkUploadKey: string | null
    //         }[] = [
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.january,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                     notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T11:00:00+0900`).toDate(),
    //                     status: 0,
    //                     title: 'おこほんから誕生日プレゼント！',
    //                     summary: 'サマリーです',
    //                     shopCode: null,
    //                     description: 'いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。',
    //                     notes: '備考です',
    //                     image: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
    //                     movieURL: null,
    //                     hasCoupon: false,
    //                     campaignStart: null,
    //                     campaignEnd: null,
    //                     birth: null,
    //                     birthdayFrom: null,
    //                     birthdayTo: null,
    //                     couponExpiredAt: null,
    //                     couponPublishAt: null,
    //                     expiredAt: null,
    //                     familyAge: null,
    //                     familyBirth: null,
    //                     gender: null,
    //                     lowerStamp: null,
    //                     upperStamp: null,
    //                     numberToSend: 3,
    //                     post: null,
    //                     userIds: null,
    //                     publishAt: null,
    //                     targetShopCode: null,
    //                     autoPushCampaignCode: '50001004',
    //                     visitorPromotionTargetType: null,
    //                     topicType: TopicType.birthdayMonth01Q1,
    //                     uidBulkUploadKey: null,
    //                 },
    //             ]
    //         for (const c of testCase) {
    //             await Promise.all(
    //                 userFeedData1.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.users)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 topicUserFeedData1.map(async (feedData) => {
    //                     const topicName = `${process.env.BRAND_CODE}_user_birthday_month_${c.monthCode}_q${c.quarter}`
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                     for (const uid of c.uids) {
    //                         await store
    //                             .collection(firestoreCollectionName.topicUsers)
    //                             .doc(topicName)
    //                             .collection(firestoreCollectionName.topicUserUIDs)
    //                             .add({
    //                                 uid: uid,
    //                             })
    //                             .catch((err) => {
    //                                 throw err
    //                             })
    //                     }
    //                 })
    //             )
    //             await Promise.all(
    //                 c.autoPushFeedData.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.autoPush)
    //                         .doc(AutoPushCampaignCode.birthdayMonthCampaign)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const result = await campaignUsecase.createBirthdayMonthCampaign(c.monthCode, c.birthdayType, c.quarter).catch((err) => {
    //                 throw err
    //             })
    //
    //             expect(result.campaignCode).toBe(c.createdCampaignCode)
    //             expect(result.monthCode).toBe(c.monthCode)
    //             expect(result.targetUserCount).toBe(c.uids.length)
    //             expect(result.uids.sort()).toEqual(c.uids.sort())
    //             expect(result.birthdayType).toBe(c.birthdayType)
    //             expect(result.topicType).toBe(c.topicType)
    //
    //             const snapshot = await store
    //                 .collection(firestoreCollectionName.campaigns)
    //                 .where('campaignCode', '==', result.campaignCode)
    //                 .get()
    //                 .catch((err) => {
    //                     throw err
    //                 })
    //
    //             expect(snapshot.empty).toBeFalsy()
    //             const data = snapshot.docs[0].data()
    //
    //             expect(data.campaignCode).toBe(result.campaignCode)
    //             expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
    //             expect(data.status).toBe(c.status)
    //             expect(data.title).toBe(c.title)
    //             expect(data.summary).toBe(c.summary)
    //             expect(data.shopCode).toBe(c.shopCode)
    //             expect(data.description).toBe(c.description)
    //             expect(data.notes).toBe(c.notes)
    //             expect(data.image).toBe(c.image)
    //             expect(data.movieURL).toBe(c.movieURL)
    //             expect(data.hasCoupon).toBe(c.hasCoupon)
    //             expect(data.couponDocIDs).toBeNull()
    //             expect(data.campaignStart).toBe(c.campaignStart)
    //             expect(data.campaignEnd).toBe(c.campaignEnd)
    //             expect(data.birth).toEqual(c.birth)
    //             expect(data.birthdayFrom).toBe(c.birthdayFrom)
    //             expect(data.birthdayTo).toBe(c.birthdayTo)
    //             expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
    //             expect(data.couponPublishAt).toEqual(c.couponPublishAt)
    //             expect(data.expiredAt).toEqual(c.expiredAt)
    //             expect(data.familyAge).toEqual(c.familyAge)
    //             expect(data.familyBirth).toEqual(c.familyBirth)
    //             expect(data.gender).toBe(c.gender)
    //             expect(data.lowerStamp).toBe(c.lowerStamp)
    //             expect(data.upperStamp).toBe(c.upperStamp)
    //             expect(data.numberToSend).toBe(c.numberToSend)
    //             expect(data.post).toBe(c.post)
    //             expect(data.userIds).toEqual(c.userIds)
    //             expect(data.publishAt).toEqual(c.publishAt)
    //             expect(data.targetShopCode).toEqual(c.targetShopCode)
    //             expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
    //             expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
    //             expect(data.topicType).toBe(c.topicType)
    //             expect(data.uidBulkUploadKey).toBe(c.uidBulkUploadKey)
    //
    //             await flushDB().catch((err) => {
    //                 throw err
    //             })
    //             await flushFirestore().catch((err) => {
    //                 throw err
    //             })
    //         }
    //     })
    //     test('CampaignUsecase.createBirthdayMonthCampaign: Created birthday campaign for all birth month, and quarter', async (): Promise<void> => {
    //         const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
    //         const testCase: {
    //             autoPushFeedData: AutoPushModel[]
    //             couponFeedData: CouponModel[]
    //             uids: string[]
    //             createdCampaignCode: string
    //             monthCode: MonthCode
    //             birthdayType: BirthdayType
    //             quarter: number
    //             topicType: TopicType | null
    //         }[] = [
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.january,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth01Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.january,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth01Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.february,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth02Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.february,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth02Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.march,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth03Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.march,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth03Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.april,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth04Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.april,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth04Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.may,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth05Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.may,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth05Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.june,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth06Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.june,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth06Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.july,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth07Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.july,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth07Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.august,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth08Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.august,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth08Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.september,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth09Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.september,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth09Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.october,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth10Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.october,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth10Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.november,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth11Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.november,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth11Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.december,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 1,
    //                     topicType: TopicType.birthdayMonth12Q1,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData1,
    //                     couponFeedData: couponFeedData3,
    //                     monthCode: MonthCode.december,
    //                     birthdayType: BirthdayType.self,
    //                     quarter: 2,
    //                     topicType: TopicType.birthdayMonth12Q2,
    //                     uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    //                     createdCampaignCode: '1',
    //                 },
    //             ]
    //         for (const c of testCase) {
    //             await Promise.all(
    //                 userFeedData1.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.users)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 topicUserFeedData1.map(async (feedData) => {
    //                     const topicName = `${process.env.BRAND_CODE}_user_birthday_month_${c.monthCode}_q${c.quarter}`
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                     for (const uid of c.uids) {
    //                         await store
    //                             .collection(firestoreCollectionName.topicUsers)
    //                             .doc(topicName)
    //                             .collection(firestoreCollectionName.topicUserUIDs)
    //                             .add({
    //                                 uid: uid,
    //                             })
    //                             .catch((err) => {
    //                                 throw err
    //                             })
    //                     }
    //                 })
    //             )
    //             await Promise.all(
    //                 c.couponFeedData.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.coupons)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
    //             await Promise.all(
    //                 c.autoPushFeedData.map(async (feedData) => {
    //                     const _data = Object.assign({}, feedData)
    //                     _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
    //                     return store
    //                         .collection(firestoreCollectionName.autoPush)
    //                         .doc(AutoPushCampaignCode.birthdayMonthCampaign)
    //                         .set(_data)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const result = await campaignUsecase.createBirthdayMonthCampaign(c.monthCode, c.birthdayType, c.quarter).catch((err) => {
    //                 throw err
    //             })
    //
    //             expect(result.campaignCode).toBe(c.createdCampaignCode)
    //             expect(result.monthCode).toBe(c.monthCode)
    //             expect(result.targetUserCount).toBe(c.uids.length)
    //             expect(result.uids.sort()).toEqual(c.uids.sort())
    //             expect(result.birthdayType).toBe(c.birthdayType)
    //             expect(result.topicType).toBe(c.topicType)
    //
    //             const snapshot = await store
    //                 .collection(firestoreCollectionName.campaigns)
    //                 .where('campaignCode', '==', result.campaignCode)
    //                 .get()
    //                 .catch((err) => {
    //                     throw err
    //                 })
    //
    //             expect(snapshot.empty).toBeFalsy()
    //             const data = snapshot.docs[0].data()
    //
    //             expect(data.topicType).toBe(c.topicType)
    //
    //             await flushDB().catch((err) => {
    //                 throw err
    //             })
    //             await flushFirestore().catch((err) => {
    //                 throw err
    //             })
    //         }
    //     })
    // })
    // describe('大切な人の誕生日を登録しているユーザーに誕生日キャンペーンが生成され、キャンペーンに期待される値がセットされている', (): void => {
    //     test('CampaignUsecase.createBirthdayMonthCampaign: Created birthday campaign for my special person', async (): Promise<void> => {
    //         const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
    //         const testCase: {
    //             autoPushFeedData: AutoPushModel[]
    //             couponFeedData: CouponModel[]
    //             // userFamilyFeedData: UserFamilyModel[]
    //             topicUserFeedData: TopicUserModel[]
    //             monthCode: MonthCode
    //             birthdayType: BirthdayType
    //             uid: string
    //             createdCampaignCode: string
    //             notifiedAt: Date | null
    //             status: number
    //             title: string
    //             summary: string
    //             shopCode: number | null
    //             description: string
    //             notes: string
    //             image: string | null
    //             movieURL: string | null
    //             hasCoupon: boolean
    //             campaignStart: Date | null
    //             campaignEnd: Date | null
    //             birth: number[] | null | undefined
    //             birthdayFrom: number | null | undefined
    //             birthdayTo: number | null | undefined
    //             couponExpiredAt: Date | null
    //             couponPublishAt: Date | null
    //             expiredAt: Date | null
    //             familyAge: number[] | null | undefined
    //             familyBirth: number[] | null | undefined
    //             gender: string | null | undefined
    //             lowerStamp: number | null | undefined
    //             upperStamp: number | null | undefined
    //             numberToSend: number | null | undefined
    //             post: number | null | undefined
    //             userIds: number[] | null
    //             publishAt: Date | null
    //             targetShopCode: { name: string; shopCode: string }[] | null | undefined
    //             autoPushCampaignCode: string | null
    //             visitorPromotionTargetType: VisitorPromotionTargetType | null
    //             topicType: TopicType | null
    //             uidBulkUploadKey: string | null
    //         }[] = [
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     // userFamilyFeedData: userFamilyFeedData1,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.january,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T11:00:00+0900`).toDate(),
    //                     status: 0,
    //                     title: '大切な人の誕生日にクーポンはいかが？',
    //                     summary: 'サマリーです',
    //                     shopCode: null,
    //                     description: 'いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。',
    //                     notes: '備考です',
    //                     image: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
    //                     movieURL: null,
    //                     hasCoupon: true,
    //                     campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T11:00:00+0900`).toDate(),
    //                     campaignEnd: moment().add(60, 'days').add(-1, 'day').endOf('day').toDate(),
    //                     birth: null,
    //                     birthdayFrom: null,
    //                     birthdayTo: null,
    //                     couponExpiredAt: null,
    //                     couponPublishAt: null,
    //                     expiredAt: null,
    //                     familyAge: null,
    //                     familyBirth: null,
    //                     gender: null,
    //                     lowerStamp: null,
    //                     upperStamp: null,
    //                     numberToSend: 1,
    //                     post: null,
    //                     userIds: null,
    //                     publishAt: null,
    //                     targetShopCode: null,
    //                     autoPushCampaignCode: '50001009',
    //                     visitorPromotionTargetType: null,
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth01,
    //                     uidBulkUploadKey: null,
    //                 },
    //             ]
    //         for (const c of testCase) {
    //             await Promise.all(
    //                 userFeedData1.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.users)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             // await Promise.all(
    //             //     c.userFamilyFeedData.map(async (feedData) => {
    //             //         return store
    //             //             .collection(firestoreCollectionName.users)
    //             //             .doc(c.uid)
    //             //             .collection(firestoreCollectionName.userFamily)
    //             //             .add(feedData)
    //             //             .catch((err) => {
    //             //                 throw err
    //             //             })
    //             //     })
    //             // )
    //             await Promise.all(
    //                 c.topicUserFeedData.map(async (feedData) => {
    //                     const topicName = `${process.env.BRAND_CODE}_my_special_person_birthday_month_${c.monthCode}`
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .collection(firestoreCollectionName.topicUserUIDs)
    //                         .add({
    //                             uid: c.uid,
    //                         })
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 c.couponFeedData.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.coupons)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
    //             await Promise.all(
    //                 c.autoPushFeedData.map(async (feedData) => {
    //                     const _data = Object.assign({}, feedData)
    //                     _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
    //                     return store
    //                         .collection(firestoreCollectionName.autoPush)
    //                         .doc(AutoPushCampaignCode.mySpecialPersonAllBirthdayMonthCampaign)
    //                         .set(_data)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const result = await campaignUsecase.createBirthdayMonthCampaign(c.monthCode, c.birthdayType).catch((err) => {
    //                 throw err
    //             })
    //
    //             expect(result.campaignCode).toBe(c.createdCampaignCode)
    //             expect(result.monthCode).toBe(c.monthCode)
    //             expect(result.targetUserCount).toBe(1)
    //             expect(result.uids).toEqual([c.uid])
    //             expect(result.birthdayType).toBe(c.birthdayType)
    //             expect(result.topicType).toBe(c.topicType)
    //
    //             const snapshot = await store
    //                 .collection(firestoreCollectionName.campaigns)
    //                 .where('campaignCode', '==', result.campaignCode)
    //                 .get()
    //                 .catch((err) => {
    //                     throw err
    //                 })
    //
    //             expect(snapshot.empty).toBeFalsy()
    //             const data = snapshot.docs[0].data()
    //
    //             expect(data.campaignCode).toBe(result.campaignCode)
    //             expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
    //             expect(data.status).toBe(c.status)
    //             expect(data.title).toBe(c.title)
    //             expect(data.summary).toBe(c.summary)
    //             expect(data.shopCode).toBe(c.shopCode)
    //             expect(data.description).toBe(c.description)
    //             expect(data.notes).toBe(c.notes)
    //             expect(data.image).toBe(c.image)
    //             expect(data.movieURL).toBe(c.movieURL)
    //             expect(data.hasCoupon).toBe(c.hasCoupon)
    //             expect(data.couponDocIDs[0]).toBe(couponSnapshot.docs[0].id)
    //             expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
    //             expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-30, 'seconds').toDate().getTime())
    //             expect(data.birth).toEqual(c.birth)
    //             expect(data.birthdayFrom).toBe(c.birthdayFrom)
    //             expect(data.birthdayTo).toBe(c.birthdayTo)
    //             expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
    //             expect(data.couponPublishAt).toEqual(c.couponPublishAt)
    //             expect(data.expiredAt).toEqual(c.expiredAt)
    //             expect(data.familyAge).toEqual(c.familyAge)
    //             expect(data.familyBirth).toEqual(c.familyBirth)
    //             expect(data.gender).toBe(c.gender)
    //             expect(data.lowerStamp).toBe(c.lowerStamp)
    //             expect(data.upperStamp).toBe(c.upperStamp)
    //             expect(data.numberToSend).toBe(c.numberToSend)
    //             expect(data.post).toBe(c.post)
    //             expect(data.userIds).toEqual(c.userIds)
    //             expect(data.publishAt).toEqual(c.publishAt)
    //             expect(data.targetShopCode).toEqual(c.targetShopCode)
    //             expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
    //             expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
    //             expect(data.topicType).toBe(c.topicType)
    //             expect(data.uidBulkUploadKey).toBe(c.uidBulkUploadKey)
    //
    //             await flushDB().catch((err) => {
    //                 throw err
    //             })
    //             await flushFirestore().catch((err) => {
    //                 throw err
    //             })
    //         }
    //     })
    //     test('CampaignUsecase.createBirthdayMonthCampaign: Created birthday campaign for my special person with no coupon', async (): Promise<void> => {
    //         const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
    //         const testCase: {
    //             autoPushFeedData: AutoPushModel[]
    //             topicUserFeedData: TopicUserModel[]
    //             monthCode: MonthCode
    //             birthdayType: BirthdayType
    //             uid: string
    //             createdCampaignCode: string
    //             notifiedAt: Date | null
    //             status: number
    //             title: string
    //             summary: string
    //             shopCode: number | null
    //             description: string
    //             notes: string
    //             image: string | null
    //             movieURL: string | null
    //             hasCoupon: boolean
    //             campaignStart: Date | null
    //             campaignEnd: Date | null
    //             birth: number[] | null | undefined
    //             birthdayFrom: number | null | undefined
    //             birthdayTo: number | null | undefined
    //             couponExpiredAt: Date | null
    //             couponPublishAt: Date | null
    //             expiredAt: Date | null
    //             familyAge: number[] | null | undefined
    //             familyBirth: number[] | null | undefined
    //             gender: string | null | undefined
    //             lowerStamp: number | null | undefined
    //             upperStamp: number | null | undefined
    //             numberToSend: number | null | undefined
    //             post: number | null | undefined
    //             userIds: number[] | null
    //             publishAt: Date | null
    //             targetShopCode: { name: string; shopCode: string }[] | null | undefined
    //             autoPushCampaignCode: string | null
    //             visitorPromotionTargetType: VisitorPromotionTargetType | null
    //             topicType: TopicType | null
    //             uidBulkUploadKey: string | null
    //         }[] = [
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.january,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T11:00:00+0900`).toDate(),
    //                     status: 0,
    //                     title: '大切な人の誕生日にクーポンはいかが？',
    //                     summary: 'サマリーです',
    //                     shopCode: null,
    //                     description: 'いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。',
    //                     notes: '備考です',
    //                     image: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
    //                     movieURL: null,
    //                     hasCoupon: false,
    //                     campaignStart: null,
    //                     campaignEnd: null,
    //                     birth: null,
    //                     birthdayFrom: null,
    //                     birthdayTo: null,
    //                     couponExpiredAt: null,
    //                     couponPublishAt: null,
    //                     expiredAt: null,
    //                     familyAge: null,
    //                     familyBirth: null,
    //                     gender: null,
    //                     lowerStamp: null,
    //                     upperStamp: null,
    //                     numberToSend: 1,
    //                     post: null,
    //                     userIds: null,
    //                     publishAt: null,
    //                     targetShopCode: null,
    //                     autoPushCampaignCode: '50001009',
    //                     visitorPromotionTargetType: null,
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth01,
    //                     uidBulkUploadKey: null,
    //                 },
    //             ]
    //         for (const c of testCase) {
    //             await Promise.all(
    //                 userFeedData1.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.users)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 c.topicUserFeedData.map(async (feedData) => {
    //                     const topicName = `${process.env.BRAND_CODE}_my_special_person_birthday_month_${c.monthCode}`
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .collection(firestoreCollectionName.topicUserUIDs)
    //                         .add({
    //                             uid: c.uid,
    //                         })
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 c.autoPushFeedData.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.autoPush)
    //                         .doc(AutoPushCampaignCode.mySpecialPersonAllBirthdayMonthCampaign)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const result = await campaignUsecase.createBirthdayMonthCampaign(c.monthCode, c.birthdayType).catch((err) => {
    //                 throw err
    //             })
    //
    //             expect(result.campaignCode).toBe(c.createdCampaignCode)
    //             expect(result.monthCode).toBe(c.monthCode)
    //             expect(result.targetUserCount).toBe(1)
    //             expect(result.uids).toEqual([c.uid])
    //             expect(result.birthdayType).toBe(c.birthdayType)
    //             expect(result.topicType).toBe(c.topicType)
    //
    //             const snapshot = await store
    //                 .collection(firestoreCollectionName.campaigns)
    //                 .where('campaignCode', '==', result.campaignCode)
    //                 .get()
    //                 .catch((err) => {
    //                     throw err
    //                 })
    //
    //             expect(snapshot.empty).toBeFalsy()
    //             const data = snapshot.docs[0].data()
    //
    //             expect(data.campaignCode).toBe(result.campaignCode)
    //             expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
    //             expect(data.status).toBe(c.status)
    //             expect(data.title).toBe(c.title)
    //             expect(data.summary).toBe(c.summary)
    //             expect(data.shopCode).toBe(c.shopCode)
    //             expect(data.description).toBe(c.description)
    //             expect(data.notes).toBe(c.notes)
    //             expect(data.image).toBe(c.image)
    //             expect(data.movieURL).toBe(c.movieURL)
    //             expect(data.hasCoupon).toBe(c.hasCoupon)
    //             expect(data.couponDocIDs).toBeNull()
    //             expect(data.campaignStart).toBe(c.campaignStart)
    //             expect(data.campaignEnd).toBe(c.campaignEnd)
    //             expect(data.birth).toEqual(c.birth)
    //             expect(data.birthdayFrom).toBe(c.birthdayFrom)
    //             expect(data.birthdayTo).toBe(c.birthdayTo)
    //             expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
    //             expect(data.couponPublishAt).toEqual(c.couponPublishAt)
    //             expect(data.expiredAt).toEqual(c.expiredAt)
    //             expect(data.familyAge).toEqual(c.familyAge)
    //             expect(data.familyBirth).toEqual(c.familyBirth)
    //             expect(data.gender).toBe(c.gender)
    //             expect(data.lowerStamp).toBe(c.lowerStamp)
    //             expect(data.upperStamp).toBe(c.upperStamp)
    //             expect(data.numberToSend).toBe(c.numberToSend)
    //             expect(data.post).toBe(c.post)
    //             expect(data.userIds).toEqual(c.userIds)
    //             expect(data.publishAt).toEqual(c.publishAt)
    //             expect(data.targetShopCode).toEqual(c.targetShopCode)
    //             expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
    //             expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
    //             expect(data.topicType).toBe(c.topicType)
    //             expect(data.uidBulkUploadKey).toBe(c.uidBulkUploadKey)
    //
    //             await flushDB().catch((err) => {
    //                 throw err
    //             })
    //             await flushFirestore().catch((err) => {
    //                 throw err
    //             })
    //         }
    //     })
    //     test('CampaignUsecase.createBirthdayMonthCampaign: Created birthday campaign for my special person', async (): Promise<void> => {
    //         const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
    //         const testCase: {
    //             autoPushFeedData: AutoPushModel[]
    //             couponFeedData: CouponModel[]
    //             topicUserFeedData: TopicUserModel[]
    //             monthCode: MonthCode
    //             birthdayType: BirthdayType
    //             uid: string
    //             createdCampaignCode: string
    //             topicType: TopicType | null
    //         }[] = [
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.january,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth01,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.february,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth02,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.march,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth03,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.april,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth04,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.may,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth05,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.june,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth06,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.july,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth07,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.august,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth08,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.september,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth09,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.october,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth10,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.november,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth11,
    //                 },
    //                 {
    //                     autoPushFeedData: autoPushFeedData4,
    //                     couponFeedData: couponFeedData3,
    //                     topicUserFeedData: topicUserFeedData2,
    //                     monthCode: MonthCode.december,
    //                     birthdayType: BirthdayType.mySpecialPersonAll,
    //                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
    //                     createdCampaignCode: '1',
    //                     topicType: TopicType.mySpecialPersonBirthdayMonth12,
    //                 },
    //             ]
    //         for (const c of testCase) {
    //             await Promise.all(
    //                 userFeedData1.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.users)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 c.topicUserFeedData.map(async (feedData) => {
    //                     const topicName = `${process.env.BRAND_CODE}_my_special_person_birthday_month_${c.monthCode}`
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .set(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                     await store
    //                         .collection(firestoreCollectionName.topicUsers)
    //                         .doc(topicName)
    //                         .collection(firestoreCollectionName.topicUserUIDs)
    //                         .add({
    //                             uid: c.uid,
    //                         })
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             await Promise.all(
    //                 c.couponFeedData.map(async (feedData) => {
    //                     return store
    //                         .collection(firestoreCollectionName.coupons)
    //                         .add(feedData)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
    //             await Promise.all(
    //                 c.autoPushFeedData.map(async (feedData) => {
    //                     const _data = Object.assign({}, feedData)
    //                     _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
    //                     return store
    //                         .collection(firestoreCollectionName.autoPush)
    //                         .doc(AutoPushCampaignCode.mySpecialPersonAllBirthdayMonthCampaign)
    //                         .set(_data)
    //                         .catch((err) => {
    //                             throw err
    //                         })
    //                 })
    //             )
    //             const result = await campaignUsecase.createBirthdayMonthCampaign(c.monthCode, c.birthdayType).catch((err) => {
    //                 throw err
    //             })
    //
    //             expect(result.campaignCode).toBe(c.createdCampaignCode)
    //             expect(result.monthCode).toBe(c.monthCode)
    //             expect(result.targetUserCount).toBe(1)
    //             expect(result.uids).toEqual([c.uid])
    //             expect(result.birthdayType).toBe(c.birthdayType)
    //             expect(result.topicType).toBe(c.topicType)
    //
    //             const snapshot = await store
    //                 .collection(firestoreCollectionName.campaigns)
    //                 .where('campaignCode', '==', result.campaignCode)
    //                 .get()
    //                 .catch((err) => {
    //                     throw err
    //                 })
    //
    //             expect(snapshot.empty).toBeFalsy()
    //             const data = snapshot.docs[0].data()
    //             expect(data.topicType).toBe(c.topicType)
    //
    //             await flushDB().catch((err) => {
    //                 throw err
    //             })
    //             await flushFirestore().catch((err) => {
    //                 throw err
    //             })
    //         }
    //     })
  });
});

// describe('CampaignUsecase.updateSubscriberCount tests', () => {
//     describe('campaignsの予定配信数に配信ユーザー数がセットされる', (): void => {
//         test('CampaignUsecase.updateSubscriberCount: Set numberToSend topic userCount for a brand all topic', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 campaignFeedData: CampaignModel[]
//                 topicFeedData: TopicModel[]
//                 campaignCode: string
//                 expectedSubscriberCount: number
//             }[] = [
//                     {
//                         campaignFeedData: campaignFeedData1,
//                         topicFeedData: topicFeedData1,
//                         campaignCode: '500001',
//                         expectedSubscriberCount: 15,
//                     },
//                     {
//                         campaignFeedData: campaignFeedData1,
//                         topicFeedData: topicFeedData1,
//                         campaignCode: '500002',
//                         expectedSubscriberCount: 8,
//                     },
//                     {
//                         campaignFeedData: campaignFeedData1,
//                         topicFeedData: topicFeedData1,
//                         campaignCode: '500003',
//                         expectedSubscriberCount: 18,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.campaignFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.campaigns)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.topicFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.topics)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.updateSubscriberCount().catch((err) => {
//                     throw err
//                 })
//                 const snapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.campaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const data = snapshot.docs[0].data()
//                 expect(data.numberToSend).toBe(c.expectedSubscriberCount)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.sendVisitorPromotionCampaign tests', () => {
//     describe('来店回数１回、及び２回のユーザーに来店日の翌日にクーポンが配布されるキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who visited a shop once or twice', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignNotifiedAt: Date | null
//                 campaignStatus: number
//                 campaignTitle: string
//                 campaignSummary: string
//                 campaignDescription: string
//                 campaignNotes: string
//                 campaignImage: string | null
//                 campaignMovieURL: string | null
//                 campaignHasCoupon: boolean
//                 campaignCouponDocID: string
//                 campaignNumberToSend: number | null | undefined
//                 campaignUserIds: string[]
//                 campaignTargetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 campaignAutoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterFirstVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData2,
//                         dailyVisitorFeedData: dailyVisitorFeedData1,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご来店ありがとうございました！',
//                         campaignSummary: 'ご来店感謝特別クーポンプレゼント！',
//                         campaignDescription:
//                             '先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignMovieURL: null,
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001005',
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSecondVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData2,
//                         dailyVisitorFeedData: dailyVisitorFeedData1,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご来店ありがとうございました！',
//                         campaignSummary: 'ご来店感謝特別クーポンプレゼント！',
//                         campaignDescription:
//                             '先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignMovieURL: null,
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1001'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001005',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe(c.createdCampaignCode)
//                 expect(result.targetUserCount).toBe(c.campaignNumberToSend)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([c.uid])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(campaignData.notifiedAt.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.status).toBe(c.campaignStatus)
//                 expect(campaignData.title).toBe(c.campaignTitle)
//                 expect(campaignData.summary).toBe(c.campaignSummary)
//                 expect(campaignData.shopCode).toBe(c.campaignTargetShopCode)
//                 expect(campaignData.description).toBe(c.campaignDescription)
//                 expect(campaignData.notes).toBe(c.campaignNotes)
//                 expect(campaignData.image).toBe(c.campaignImage)
//                 expect(campaignData.movieURL).toBe(c.campaignMovieURL)
//                 expect(campaignData.hasCoupon).toBe(c.campaignHasCoupon)
//                 expect(campaignData.couponDocIDs[0]).toBe(c.couponDocID)
//                 expect(campaignData.campaignStart.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.campaignEnd.toDate()).toEqual(userCouponExpiredAt)
//                 expect(campaignData.birth).toBeNull()
//                 expect(campaignData.birthdayFrom).toBeNull()
//                 expect(campaignData.birthdayTo).toBeNull()
//                 expect(campaignData.couponExpiredAt).toBeNull()
//                 expect(campaignData.couponPublishAt).toBeNull()
//                 expect(campaignData.expiredAt).toBeNull()
//                 expect(campaignData.familyAge).toBeNull()
//                 expect(campaignData.familyBirth).toBeNull()
//                 expect(campaignData.gender).toBeNull()
//                 expect(campaignData.lowerStamp).toBeNull()
//                 expect(campaignData.upperStamp).toBeNull()
//                 expect(campaignData.numberToSend).toBe(c.campaignNumberToSend)
//                 expect(campaignData.post).toBeNull()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.publishAt).toBeNull()
//                 expect(campaignData.targetShopCode).toBeNull()
//                 expect(campaignData.autoPushCampaignCode).toBe(c.campaignAutoPushCampaignCode)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.sendVisitorPromotionCampaign: Not to send a coupon for users who visited a shop third times', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//             }[] = [
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterFirstVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData2,
//                         dailyVisitorFeedData: dailyVisitorFeedData1,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData2,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe('')
//                 expect(result.targetUserCount).toBe(0)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeTruthy()
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.sendVisitorPromotionCampaign: Not to send a coupon for users who is not included in dailyVisitors collections data for yesterday', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//             }[] = [
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterFirstVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData2,
//                         dailyVisitorFeedData: dailyVisitorFeedData2,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData1,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe('')
//                 expect(result.targetUserCount).toBe(0)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeTruthy()
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('前日来店したユーザーに来店日の翌日にクーポンが配布されるキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.sendVisitorPromotionCampaign(afterEveryVisit): Generate a campaign to send a coupon for users who visited a shop', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 expectedUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 createdCampaignCode: string
//                 campaignNotifiedAt: Date | null
//                 campaignStatus: number
//                 campaignTitle: string
//                 campaignSummary: string
//                 campaignDescription: string
//                 campaignNotes: string
//                 campaignImage: string | null
//                 campaignMovieURL: string | null
//                 campaignHasCoupon: boolean
//                 campaignNumberToSend: number | null | undefined
//                 campaignUserIds: string[]
//                 campaignTargetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 campaignAutoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         expectedUIDs: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterEveryVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData1,
//                         autoPushFeedData: autoPushFeedData10,
//                         dailyVisitorFeedData: dailyVisitorFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご来店ありがとうございました！',
//                         campaignSummary: 'ご来店感謝特別クーポンプレゼント！',
//                         campaignDescription:
//                             '先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignMovieURL: null,
//                         campaignHasCoupon: true,
//                         campaignNumberToSend: 2,
//                         campaignUserIds: ['1001', '1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: AutoPushCampaignCode.visitorPromotionThanksForEveryVisit,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe(c.createdCampaignCode)
//                 expect(result.targetUserCount).toBe(c.campaignNumberToSend)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(
//                     result.uids.sort((a, b) => {
//                         if (a < b) {
//                             return 1
//                         } else {
//                             return -1
//                         }
//                     })
//                 ).toEqual(c.expectedUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(campaignData.notifiedAt.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.status).toBe(c.campaignStatus)
//                 expect(campaignData.title).toBe(c.campaignTitle)
//                 expect(campaignData.summary).toBe(c.campaignSummary)
//                 expect(campaignData.shopCode).toBe(c.campaignTargetShopCode)
//                 expect(campaignData.description).toBe(c.campaignDescription)
//                 expect(campaignData.notes).toBe(c.campaignNotes)
//                 expect(campaignData.image).toBe(c.campaignImage)
//                 expect(campaignData.movieURL).toBe(c.campaignMovieURL)
//                 expect(campaignData.hasCoupon).toBe(c.campaignHasCoupon)
//                 expect(campaignData.couponDocIDs[0]).toBe(c.couponDocID)
//                 expect(campaignData.campaignStart.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.campaignEnd.toDate()).toEqual(userCouponExpiredAt)
//                 expect(campaignData.birth).toBeNull()
//                 expect(campaignData.birthdayFrom).toBeNull()
//                 expect(campaignData.birthdayTo).toBeNull()
//                 expect(campaignData.couponExpiredAt).toBeNull()
//                 expect(campaignData.couponPublishAt).toBeNull()
//                 expect(campaignData.expiredAt).toBeNull()
//                 expect(campaignData.familyAge).toBeNull()
//                 expect(campaignData.familyBirth).toBeNull()
//                 expect(campaignData.gender).toBeNull()
//                 expect(campaignData.lowerStamp).toBeNull()
//                 expect(campaignData.upperStamp).toBeNull()
//                 expect(campaignData.numberToSend).toBe(c.campaignNumberToSend)
//                 expect(campaignData.post).toBeNull()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.publishAt).toBeNull()
//                 expect(campaignData.targetShopCode).toBeNull()
//                 expect(campaignData.autoPushCampaignCode).toBe(c.campaignAutoPushCampaignCode)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.sendVisitorPromotionCampaign(afterEveryVisit): If coupon has expired date, user coupon expired date is same as coupon expired date', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 expectedUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 createdCampaignCode: string
//                 couponExpiredDate: Date
//             }[] = [
//                     {
//                         expectedUIDs: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterEveryVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData8,
//                         autoPushFeedData: autoPushFeedData10,
//                         dailyVisitorFeedData: dailyVisitorFeedData1,
//                         createdCampaignCode: '1',
//                         couponExpiredDate: moment().add(1, 'month').tz('Asia/Tokyo').toDate(),
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(moment(campaignData.campaignEnd.toDate()).format('YYYYMMDDHH')).toBe(
//                     moment(c.couponExpiredDate).format('YYYYMMDDHH')
//                 )
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.sendVisitorPromotionCampaign(afterEveryVisit): Not to send a coupon for users who is not included in dailyVisitors collections data for yesterday', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//             }[] = [
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterEveryVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData2,
//                         dailyVisitorFeedData: dailyVisitorFeedData2,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData1,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe('')
//                 expect(result.targetUserCount).toBe(0)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeTruthy()
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('焼肉きんぐの場合、前日来店したユーザーのうち、階級アップしていないユーザーのみキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.sendVisitorPromotionCampaign(afterEveryVisit): Generate a campaign for only users whose rank is not upgraded', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.yakinikuking
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 expectedUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 dailyVisitorFeedData: DailyVisitorModel[]
//                 ykpdExchangableGiftRemindLogFeedData: YKPDExchangableGiftRemindLogModel[]
//                 createdCampaignCode: string
//                 campaignNotifiedAt: Date | null
//                 campaignStatus: number
//                 campaignTitle: string
//                 campaignSummary: string
//                 campaignDescription: string
//                 campaignNotes: string
//                 campaignImage: string | null
//                 campaignMovieURL: string | null
//                 campaignHasCoupon: boolean
//                 campaignNumberToSend: number | null | undefined
//                 campaignUserIds: string[]
//                 campaignTargetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 campaignAutoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         expectedUIDs: ['IWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterEveryVisit,
//                         couponDocID: 'YV6nCaMwTUELW232ev6A',
//                         couponFeedData: couponFeedData1,
//                         autoPushFeedData: autoPushFeedData10,
//                         dailyVisitorFeedData: dailyVisitorFeedData1,
//                         ykpdExchangableGiftRemindLogFeedData: ykpdExchangableGiftRemindLogFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご来店ありがとうございました！',
//                         campaignSummary: 'ご来店感謝特別クーポンプレゼント！',
//                         campaignDescription:
//                             '先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignMovieURL: null,
//                         campaignHasCoupon: true,
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: AutoPushCampaignCode.visitorPromotionThanksForEveryVisit,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dailyVisitorFeedData.map(async (feedData) => {
//                         const data = Object.assign({}, feedData as any)
//                         data.uids = feedData.uids!.join(',')
//                         return store
//                             .collection(firestoreCollectionName.dailyVisitors)
//                             .add(data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.ykpdExchangableGiftRemindLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.ykpdExchangableGiftRemindLog)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe(c.createdCampaignCode)
//                 expect(result.targetUserCount).toBe(c.campaignNumberToSend)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(
//                     result.uids.sort((a, b) => {
//                         if (a < b) {
//                             return 1
//                         } else {
//                             return -1
//                         }
//                     })
//                 ).toEqual(c.expectedUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(campaignData.notifiedAt.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.status).toBe(c.campaignStatus)
//                 expect(campaignData.title).toBe(c.campaignTitle)
//                 expect(campaignData.summary).toBe(c.campaignSummary)
//                 expect(campaignData.shopCode).toBe(c.campaignTargetShopCode)
//                 expect(campaignData.description).toBe(c.campaignDescription)
//                 expect(campaignData.notes).toBe(c.campaignNotes)
//                 expect(campaignData.image).toBe(c.campaignImage)
//                 expect(campaignData.movieURL).toBe(c.campaignMovieURL)
//                 expect(campaignData.hasCoupon).toBe(c.campaignHasCoupon)
//                 expect(campaignData.couponDocIDs[0]).toBe(c.couponDocID)
//                 expect(campaignData.campaignStart.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.campaignEnd.toDate()).toEqual(userCouponExpiredAt)
//                 expect(campaignData.birth).toBeNull()
//                 expect(campaignData.birthdayFrom).toBeNull()
//                 expect(campaignData.birthdayTo).toBeNull()
//                 expect(campaignData.couponExpiredAt).toBeNull()
//                 expect(campaignData.couponPublishAt).toBeNull()
//                 expect(campaignData.expiredAt).toBeNull()
//                 expect(campaignData.familyAge).toBeNull()
//                 expect(campaignData.familyBirth).toBeNull()
//                 expect(campaignData.gender).toBeNull()
//                 expect(campaignData.lowerStamp).toBeNull()
//                 expect(campaignData.upperStamp).toBeNull()
//                 expect(campaignData.numberToSend).toBe(c.campaignNumberToSend)
//                 expect(campaignData.post).toBeNull()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.publishAt).toBeNull()
//                 expect(campaignData.targetShopCode).toBeNull()
//                 expect(campaignData.autoPushCampaignCode).toBe(c.campaignAutoPushCampaignCode)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('前回の来店から3/5/7/9/11ヶ月来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for 3/5/7/9/11 months from last visit', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignNotifiedAt: Date | null
//                 campaignStatus: number
//                 campaignTitle: string
//                 campaignSummary: string
//                 campaignDescription: string
//                 campaignNotes: string
//                 campaignImage: string | null
//                 campaignHasCoupon: boolean
//                 campaignCouponDocID: string
//                 campaignNumberToSend: number | null | undefined
//                 campaignUserIds: string[]
//                 campaignTargetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 campaignAutoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.after3MonthFromLastVisit,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData3,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.after5MonthFromLastVisit,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData3,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1001'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'ZWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.after7MonthFromLastVisit,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData3,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1003'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.after9MonthFromLastVisit,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData4,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.after11MonthFromLastVisit,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData4,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1001'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe(c.createdCampaignCode)
//                 expect(result.targetUserCount).toBe(c.campaignNumberToSend)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([c.uid])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(campaignData.notifiedAt.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.status).toBe(c.campaignStatus)
//                 expect(campaignData.title).toBe(c.campaignTitle)
//                 expect(campaignData.summary).toBe(c.campaignSummary)
//                 expect(campaignData.shopCode).toBe(c.campaignTargetShopCode)
//                 expect(campaignData.description).toBe(c.campaignDescription)
//                 expect(campaignData.notes).toBe(c.campaignNotes)
//                 expect(campaignData.image).toBe(c.campaignImage)
//                 expect(campaignData.hasCoupon).toBe(c.campaignHasCoupon)
//                 expect(campaignData.couponDocIDs[0]).toBe(c.couponDocID)
//                 expect(campaignData.campaignStart.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.campaignEnd.toDate()).toEqual(userCouponExpiredAt)
//                 expect(campaignData.birth).toBeNull()
//                 expect(campaignData.birthdayFrom).toBeNull()
//                 expect(campaignData.birthdayTo).toBeNull()
//                 expect(campaignData.couponExpiredAt).toBeNull()
//                 expect(campaignData.couponPublishAt).toBeNull()
//                 expect(campaignData.expiredAt).toBeNull()
//                 expect(campaignData.familyAge).toBeNull()
//                 expect(campaignData.familyBirth).toBeNull()
//                 expect(campaignData.gender).toBeNull()
//                 expect(campaignData.lowerStamp).toBeNull()
//                 expect(campaignData.upperStamp).toBeNull()
//                 expect(campaignData.numberToSend).toBe(c.campaignNumberToSend)
//                 expect(campaignData.post).toBeNull()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.publishAt).toBeNull()
//                 expect(campaignData.targetShopCode).toBeNull()
//                 expect(campaignData.autoPushCampaignCode).toBe(c.campaignAutoPushCampaignCode)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('新規会員登録してから3/5/7/9/11ヶ月間一度も来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for 3/5/7/9/11 months from a user registration', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: UserModel[]
//                 createdCampaignCode: string
//                 campaignNotifiedAt: Date | null
//                 campaignStatus: number
//                 campaignTitle: string
//                 campaignSummary: string
//                 campaignDescription: string
//                 campaignNotes: string
//                 campaignImage: string | null
//                 campaignHasCoupon: boolean
//                 campaignCouponDocID: string
//                 campaignNumberToSend: number | null | undefined
//                 campaignUserIds: string[]
//                 campaignTargetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 campaignAutoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.neverVisitedFor3Month,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userFeedData: userFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1001'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.neverVisitedFor5Month,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userFeedData: userFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'ZWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.neverVisitedFor7Month,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userFeedData: userFeedData1,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1003'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.neverVisitedFor9Month,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userFeedData: userFeedData2,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1001'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                     {
//                         uid: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.neverVisitedFor11Month,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userFeedData: userFeedData2,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: 'ご優待クーポンプレゼント',
//                         campaignSummary: 'ご優待クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignCouponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         campaignNumberToSend: 1,
//                         campaignUserIds: ['1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001006',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe(c.createdCampaignCode)
//                 expect(result.targetUserCount).toBe(c.campaignNumberToSend)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([c.uid])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(campaignData.notifiedAt.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.status).toBe(c.campaignStatus)
//                 expect(campaignData.title).toBe(c.campaignTitle)
//                 expect(campaignData.summary).toBe(c.campaignSummary)
//                 expect(campaignData.shopCode).toBe(c.campaignTargetShopCode)
//                 expect(campaignData.description).toBe(c.campaignDescription)
//                 expect(campaignData.notes).toBe(c.campaignNotes)
//                 expect(campaignData.image).toBe(c.campaignImage)
//                 expect(campaignData.hasCoupon).toBe(c.campaignHasCoupon)
//                 expect(campaignData.couponDocIDs[0]).toBe(c.couponDocID)
//                 expect(campaignData.campaignStart.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.campaignEnd.toDate()).toEqual(userCouponExpiredAt)
//                 expect(campaignData.birth).toBeNull()
//                 expect(campaignData.birthdayFrom).toBeNull()
//                 expect(campaignData.birthdayTo).toBeNull()
//                 expect(campaignData.couponExpiredAt).toBeNull()
//                 expect(campaignData.couponPublishAt).toBeNull()
//                 expect(campaignData.expiredAt).toBeNull()
//                 expect(campaignData.familyAge).toBeNull()
//                 expect(campaignData.familyBirth).toBeNull()
//                 expect(campaignData.gender).toBeNull()
//                 expect(campaignData.lowerStamp).toBeNull()
//                 expect(campaignData.upperStamp).toBeNull()
//                 expect(campaignData.numberToSend).toBe(c.campaignNumberToSend)
//                 expect(campaignData.post).toBeNull()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.publishAt).toBeNull()
//                 expect(campaignData.targetShopCode).toBeNull()
//                 expect(campaignData.autoPushCampaignCode).toBe(c.campaignAutoPushCampaignCode)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.sendVisitorPromotionCampaign: Not to send a coupon for users who has not visited for 3 months from a user registration, but visited 1 year ago', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: UserModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitorPromotionTargetType: VisitorPromotionTargetType.neverVisitedFor3Month,
//                         couponDocID: 'GQbrJGUP6fteBcIk1v9U',
//                         couponFeedData: couponFeedData2,
//                         autoPushFeedData: autoPushFeedData3,
//                         userFeedData: userFeedData1,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData5,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe('')
//                 expect(result.targetUserCount).toBe(0)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids).toEqual([])
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeTruthy()
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数1回のユーザーのうち、前回の来店から7ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 7 months period from last visit (user's total visited count = 1)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignNotifiedAt: Date | null
//                 campaignStatus: number
//                 campaignTitle: string
//                 campaignSummary: string
//                 campaignDescription: string
//                 campaignNotes: string
//                 campaignImage: string | null
//                 campaignHasCoupon: boolean
//                 campaignNumberToSend: number | null | undefined
//                 campaignUserIds: string[]
//                 campaignTargetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 campaignAutoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         targetUIDs: ['aWSvISHeZYY2I0PgAlewd8UoSb63', 'bWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount1,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData6,
//                         createdCampaignCode: '1',
//                         campaignNotifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T15:00:00+0900`)
//                             .tz('Asia/Tokyo')
//                             .toDate(),
//                         campaignStatus: CampaignStatus.scheduled,
//                         campaignTitle: '来店回数UP',
//                         campaignSummary: 'クーポンプレゼント',
//                         campaignDescription:
//                             'お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！',
//                         campaignNotes:
//                             '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                         campaignImage: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         campaignHasCoupon: true,
//                         campaignNumberToSend: 2,
//                         campaignUserIds: ['1001', '1002'],
//                         campaignTargetShopCode: null,
//                         campaignAutoPushCampaignCode: '50001010',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.campaignCode).toBe(c.createdCampaignCode)
//                 expect(result.targetUserCount).toBe(c.campaignNumberToSend)
//                 expect(result.targetYYYYMMDD).toBe(moment().tz('Asia/Tokyo').add(-1, 'day').format('YYYYMMDD'))
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(campaignData.campaignCode).toBe(c.createdCampaignCode)
//                 expect(campaignData.notifiedAt.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.status).toBe(c.campaignStatus)
//                 expect(campaignData.title).toBe(c.campaignTitle)
//                 expect(campaignData.summary).toBe(c.campaignSummary)
//                 expect(campaignData.shopCode).toBe(c.campaignTargetShopCode)
//                 expect(campaignData.description).toBe(c.campaignDescription)
//                 expect(campaignData.notes).toBe(c.campaignNotes)
//                 expect(campaignData.image).toBe(c.campaignImage)
//                 expect(campaignData.hasCoupon).toBe(c.campaignHasCoupon)
//                 expect(campaignData.couponDocIDs[0]).toBe(c.couponDocID)
//                 expect(campaignData.campaignStart.toDate()).toEqual(c.campaignNotifiedAt)
//                 expect(campaignData.campaignEnd.toDate()).toEqual(userCouponExpiredAt)
//                 expect(campaignData.birth).toBeNull()
//                 expect(campaignData.birthdayFrom).toBeNull()
//                 expect(campaignData.birthdayTo).toBeNull()
//                 expect(campaignData.couponExpiredAt).toBeNull()
//                 expect(campaignData.couponPublishAt).toBeNull()
//                 expect(campaignData.expiredAt).toBeNull()
//                 expect(campaignData.familyAge).toBeNull()
//                 expect(campaignData.familyBirth).toBeNull()
//                 expect(campaignData.gender).toBeNull()
//                 expect(campaignData.lowerStamp).toBeNull()
//                 expect(campaignData.upperStamp).toBeNull()
//                 expect(campaignData.numberToSend).toBe(c.campaignNumberToSend)
//                 expect(campaignData.post).toBeNull()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.publishAt).toBeNull()
//                 expect(campaignData.targetShopCode).toBeNull()
//                 expect(campaignData.autoPushCampaignCode).toBe(c.campaignAutoPushCampaignCode)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数2回のユーザーのうち、前回の来店から7ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 7 months period from last visit (user's total visited count = 2)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['aWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount2,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData7,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1001'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数3回のユーザーのうち、前回の来店から7ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 7 months period from last visit (user's total visited count = 3)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['bWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount3,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData7,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1002'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数4回のユーザーのうち、前回の来店から6ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 6 months period from last visit (user's total visited count = 4)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['cWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount4,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData8,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1003'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数5回のユーザーのうち、前回の来店から6ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 6 months period from last visit (user's total visited count = 5)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['cWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount5,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData9,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1003'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数6回のユーザーのうち、前回の来店から5ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 5 months period from last visit (user's total visited count = 6)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['dWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount6,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData9,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1004'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数7回のユーザーのうち、前回の来店から5ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 5 months period from last visit (user's total visited count = 7)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['eWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount7,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData10,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1005'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数8回のユーザーのうち、前回の来店から4ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 4 months period from last visit (user's total visited count = 8)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['fWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount8,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData10,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1006'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('来店回数9回のユーザーのうち、前回の来店から4ヶ月間来店していないユーザーにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test("CampaignUsecase.sendVisitorPromotionCampaign: Generate a campaign to send a coupon for users who has not visited for the 4 months period from last visit (user's total visited count = 9)", async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 targetUIDs: string[]
//                 visitorPromotionTargetType: VisitorPromotionTargetType
//                 couponDocID: string
//                 couponFeedData: CouponModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 userVisitedShopsFeedData: { [key: string]: any }[]
//                 createdCampaignCode: string
//                 campaignUserIds: string[]
//             }[] = [
//                     {
//                         targetUIDs: ['fWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         visitorPromotionTargetType: VisitorPromotionTargetType.afterSpecifiedMonthFromLastVisitForVisitedCount9,
//                         couponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                         couponFeedData: couponFeedData6,
//                         autoPushFeedData: autoPushFeedData6,
//                         userVisitedShopsFeedData: userVisitedShopsFeedData11,
//                         createdCampaignCode: '1',
//                         campaignUserIds: ['1006'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData3.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userVisitedShopsFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.userVisitedShops)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.couponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const couponData = couponSnapshot.data()
//                 const term = couponData!.useTerm === null ? 30 : couponData!.useTerm
//                 const userCouponExpiredAt = moment().tz('Asia/Tokyo').add(term, 'days').endOf('day').toDate()
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         feedData.couponDocIDs = [couponSnapshot.ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.sendVisitorPromotionCampaign(c.visitorPromotionTargetType).catch((err) => {
//                     throw err
//                 })
//                 expect(result.uids.sort()).toEqual(c.targetUIDs)
//                 expect(result.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a: number, b: number) => {
//                         if (a < b) return -1
//                         if (a > b) return 1
//                         return 0
//                     })
//                 ).toEqual(c.campaignUserIds)
//                 expect(campaignData.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.notifyStampExchangeItem tests', () => {
//     describe('ランチスタンプ、及びディナースタンプが所定の数に達したとき、ユーザーにリマインドキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.notifyStampExchangeItem: Created stamp exchange remind campaign for users whose stamp count reached a specified count of exchangable coupon', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 // uids: string[]
//                 createdCampaignCode: string
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.lunch,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         stampFeedData: stampFeedData1,
//                         createdCampaignCode: '1',
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: false,
//                         campaignStart: null,
//                         campaignEnd: null,
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 10,
//                         targetStampCategory: StampCategory.lunch,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         stampFeedData: stampFeedData2,
//                         createdCampaignCode: '1',
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: false,
//                         campaignStart: null,
//                         campaignEnd: null,
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.dinner,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         stampFeedData: stampFeedData3,
//                         createdCampaignCode: '1',
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: false,
//                         campaignStart: null,
//                         campaignEnd: null,
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 10,
//                         targetStampCategory: StampCategory.dinner,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         stampFeedData: stampFeedData4,
//                         createdCampaignCode: '1',
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T12:00:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: false,
//                         campaignStart: null,
//                         campaignEnd: null,
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyStampExchangeItem().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(1)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCode)
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(c.targetStampRate)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 const logData = logSnapshot.docs[0].data()
//                 expect(logData.uid).toBe(c.uid)
//                 expect(logData.stampRate).toBe(c.targetStampRate)
//                 expect(logData.stampCategory).toBe(c.targetStampCategory)
//                 expect(logData.remindedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(logData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 expect(logData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCode)
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs).toBeNull()
//                 expect(data.campaignStart).toEqual(c.campaignStart)
//                 expect(data.campaignEnd).toEqual(c.campaignEnd)
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.notifyStampExchangeItem: Created stamp exchange remind campaign for multiple users', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uids: string[]
//                 userIds: string[]
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCode: string
//             }[] = [
//                     {
//                         uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         userIds: ['1001', '1002'],
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.lunch,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         stampFeedData: stampFeedData1,
//                         createdCampaignCode: '1',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[0])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[1])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyStampExchangeItem().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(1)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCode)
//                 expect(result[0].targetUserCount).toBe(2)
//                 expect(result[0].uids.sort()).toEqual(c.uids.sort())
//                 expect(result[0].stampRate).toBe(c.targetStampRate)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(c.uids.length)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.userIds.split(',').sort()).toEqual(c.userIds.sort())
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.notifyStampExchangeItem: Created stamp exchange remind campaigns for lunch and dinner', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uids: string[]
//                 userIds: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 lunchStampFeedData: UserStampModel[]
//                 dinnerStampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//             }[] = [
//                     {
//                         uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         userIds: ['1001', '1002'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         lunchStampFeedData: stampFeedData1,
//                         dinnerStampFeedData: stampFeedData4,
//                         createdCampaignCodes: ['1', '2'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.lunchStampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[0])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dinnerStampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[1])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyStampExchangeItem().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(c.createdCampaignCodes.length)
//
//                 const resultForLunchStamp = result.filter((v) => {
//                     return v.campaignCode === c.createdCampaignCodes[0]
//                 })
//                 expect(resultForLunchStamp[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(resultForLunchStamp[0].targetUserCount).toBe(1)
//                 expect(resultForLunchStamp[0].uids).toEqual([c.uids[0]])
//                 expect(resultForLunchStamp[0].stampRate).toBe(5)
//                 expect(resultForLunchStamp[0].stampCategory).toBe(StampCategory.lunch)
//
//                 const resultForDinnerStamp = result.filter((v) => {
//                     return v.campaignCode === c.createdCampaignCodes[1]
//                 })
//                 expect(resultForDinnerStamp[0].campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(resultForDinnerStamp[0].targetUserCount).toBe(1)
//                 expect(resultForDinnerStamp[0].uids).toEqual([c.uids[1]])
//                 expect(resultForDinnerStamp[0].stampRate).toBe(10)
//                 expect(resultForDinnerStamp[0].stampCategory).toBe(StampCategory.dinner)
//
//                 let logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uids[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uids[1])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//
//                 let campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 let data = campaignSnapshot.docs[0].data()
//                 expect(data.userIds.split(',').sort()).toEqual([c.userIds[0]])
//
//                 campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[1])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 data = campaignSnapshot.docs[0].data()
//                 expect(data.userIds.split(',').sort()).toEqual([c.userIds[1]])
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//
//     describe('ランチスタンプのリマインドが作成されたとき、ディナースタンプが所定の数に達していてもリマインドは生成されない', (): void => {
//         test('CampaignUsecase.notifyStampExchangeItem: When lunch stamp reminder created, dinner stamp reminder is not created even if user has enough dinner stamps', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uids: string[]
//                 userIds: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 lunchStampFeedData: UserStampModel[]
//                 dinnerStampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//             }[] = [
//                     {
//                         uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                         userIds: ['1001'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData4,
//                         lunchStampFeedData: stampFeedData1,
//                         dinnerStampFeedData: stampFeedData4,
//                         createdCampaignCodes: ['1'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.lunchStampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[0])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.dinnerStampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[0])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyStampExchangeItem().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(c.createdCampaignCodes.length)
//
//                 const resultForLunchStamp = result.filter((v) => {
//                     return v.campaignCode === c.createdCampaignCodes[0]
//                 })
//                 expect(resultForLunchStamp[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(resultForLunchStamp[0].targetUserCount).toBe(1)
//                 expect(resultForLunchStamp[0].uids).toEqual([c.uids[0]])
//                 expect(resultForLunchStamp[0].stampRate).toBe(5)
//                 expect(resultForLunchStamp[0].stampCategory).toBe(StampCategory.lunch)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.userIds.split(',').sort()).toEqual([c.userIds[0]])
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.extractStampCouponCampaign tests', () => {
//     describe('ランチスタンプ、及びディナースタンプが所定の数に達したとき、stampExchangeTargetUsersコレクションにユーザーが保存される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / Stored expected users in stampExchangeTargetUsers collection', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 data: {
//                     uid: string
//                     targetStampCategory: StampCategory
//                     autoPushFeedData: AutoPushModel[]
//                     couponFeedData: CouponModel[]
//                     availableStampCount: number
//                     expiredStampCount: number
//                     usedStampCount: number
//                 }
//                 result: {
//                     expectedResultCount: number
//                     expectedStampRates: number[]
//                 }
//             }[] = [
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 0,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 0,
//                             expectedStampRates: [],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 0,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 0,
//                             expectedStampRates: [],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 10,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 10,
//                             expiredStampCount: 10,
//                             usedStampCount: 10,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 15,
//                             expiredStampCount: 10,
//                             usedStampCount: 10,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.data.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 const results = await campaignUsecase.extractStampCouponCampaign(c.data.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 expect(results.length).toBe(c.result.expectedResultCount)
//                 results.sort((a, b) => {
//                     return a.stampRate - b.stampRate
//                 })
//                 if (results.length > 0) {
//                     for (var i = 0; i < c.result.expectedStampRates.length; i++) {
//                         expect(results[i].stampRate).toBe(c.result.expectedStampRates[i])
//                         expect(results[i].uids[0]).toBe(c.data.uid)
//                     }
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('5個スタンプを保持しているユーザーに2回実行しても、1回のみデータが作成される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign Only one expected data is generated even if run twice', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 data: {
//                     uid: string
//                     targetStampCategory: StampCategory
//                     autoPushFeedData: AutoPushModel[]
//                     couponFeedData: CouponModel[]
//                     availableStampCount: number
//                     expiredStampCount: number
//                     usedStampCount: number
//                 }
//                 result: {
//                     expectedResultCount: number
//                     expectedStampRates: number[]
//                 }
//             }[] = [
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 5,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 1,
//                             expectedStampRates: [5],
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.data.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 let results = await campaignUsecase.extractStampCouponCampaign(c.data.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 expect(results.length).toBe(c.result.expectedResultCount)
//                 results.sort((a, b) => {
//                     return a.stampRate - b.stampRate
//                 })
//                 if (results.length > 0) {
//                     for (var i = 0; i < c.result.expectedStampRates.length; i++) {
//                         expect(results[i].stampRate).toBe(c.result.expectedStampRates[i])
//                         expect(results[i].uids[0]).toBe(c.data.uid)
//                     }
//                 }
//                 results = await campaignUsecase
//                     .extractStampCouponCampaign(c.data.targetStampCategory, undefined, undefined)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(results.length).toBe(0)
//                 results.sort((a, b) => {
//                     return a.stampRate - b.stampRate
//                 })
//
//                 const snapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeTargetUsers)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(snapshot.docs.length).toBe(1)
//                 const data = snapshot.docs[0].data()
//                 expect(data.stampRate).toBe(c.result.expectedStampRates[0])
//                 expect(data.stampCategory).toBe(c.data.targetStampCategory)
//                 expect(data.numOfUsers).toBe(1)
//                 expect(data.maxStampRate).toBe(10)
//                 expect(data.isManuallyAdded).toBeFalsy()
//                 expect(data.campaignSentAt).toBeNull()
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('targetDateが指定されたとき、stampAddedUsersコレクションのユーザーを対象に抽出処理が実行される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign: If targetDate is specified, target users is not all registered users but users storing stampAddedUsers collection', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 data: {
//                     uid: string
//                     targetDate: Date
//                     targetStampCategory: StampCategory
//                     stampAddedUserFeedData: Omit<StampAddedUserModel, 'key' | 'createdAt' | 'updatedAt'>[]
//                     autoPushFeedData: AutoPushModel[]
//                     couponFeedData: CouponModel[]
//                     availableStampCount: number
//                     expiredStampCount: number
//                     usedStampCount: number
//                 }
//                 result: {
//                     expectedResultCount: number
//                     expectedStampRates: number[]
//                 }
//             }[] = [
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetDate: moment('2023-04-28T00:00:00+0900').toDate(),
//                             targetStampCategory: StampCategory.lunch,
//                             stampAddedUserFeedData: stampAddedUserFeedData1,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 0,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 0,
//                             expectedStampRates: [],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetDate: moment('2023-04-28T00:00:00+0900').toDate(),
//                             targetStampCategory: StampCategory.lunch,
//                             stampAddedUserFeedData: stampAddedUserFeedData1,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 10,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetDate: moment('2023-04-28T00:00:00+0900').toDate(),
//                             targetStampCategory: StampCategory.lunch,
//                             stampAddedUserFeedData: stampAddedUserFeedData1,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 10,
//                             expiredStampCount: 10,
//                             usedStampCount: 10,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetDate: moment('2023-04-28T00:00:00+0900').toDate(),
//                             targetStampCategory: StampCategory.lunch,
//                             stampAddedUserFeedData: stampAddedUserFeedData1,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 15,
//                             expiredStampCount: 10,
//                             usedStampCount: 10,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 const stampAddedUserDatastore = newStampAddedUserDatastore(store)
//                 await Promise.all(
//                     c.data.stampAddedUserFeedData.map((feedData) => {
//                         return stampAddedUserDatastore.create(feedData)
//                     })
//                 )
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.data.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 const results = await campaignUsecase
//                     .extractStampCouponCampaign(c.data.targetStampCategory, undefined, c.data.targetDate)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(results.length).toBe(c.result.expectedResultCount)
//                 results.sort((a, b) => {
//                     return a.stampRate - b.stampRate
//                 })
//                 if (results.length > 0) {
//                     for (var i = 0; i < c.result.expectedStampRates.length; i++) {
//                         expect(results[i].stampRate).toBe(c.result.expectedStampRates[i])
//                         expect(results[i].uids[0]).toBe(c.data.uid)
//                     }
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('uidが指定されたとき、stampAddedUsersコレクションのユーザーを対象に抽出処理が実行される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign: If uid is specified, target users is only the specified uid', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 data: {
//                     uid: string
//                     targetStampCategory: StampCategory
//                     autoPushFeedData: AutoPushModel[]
//                     couponFeedData: CouponModel[]
//                     availableStampCount: number
//                     expiredStampCount: number
//                     usedStampCount: number
//                 }
//                 result: {
//                     expectedResultCount: number
//                     expectedStampRates: number[]
//                 }
//             }[] = [
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 0,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 0,
//                             expectedStampRates: [],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 10,
//                             expiredStampCount: 0,
//                             usedStampCount: 0,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 10,
//                             expiredStampCount: 10,
//                             usedStampCount: 10,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                     {
//                         data: {
//                             uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                             targetStampCategory: StampCategory.lunch,
//                             autoPushFeedData: autoPushFeedData5,
//                             couponFeedData: couponFeedData5,
//                             availableStampCount: 15,
//                             expiredStampCount: 10,
//                             usedStampCount: 10,
//                         },
//                         result: {
//                             expectedResultCount: 2,
//                             expectedStampRates: [5, 10],
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.data.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.data.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.data.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.data.uid)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.data.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 const results = await campaignUsecase.extractStampCouponCampaign(c.data.targetStampCategory, c.data.uid).catch((err) => {
//                     throw err
//                 })
//                 expect(results.length).toBe(c.result.expectedResultCount)
//                 results.sort((a, b) => {
//                     return a.stampRate - b.stampRate
//                 })
//                 if (results.length > 0) {
//                     for (var i = 0; i < c.result.expectedStampRates.length; i++) {
//                         expect(results[i].stampRate).toBe(c.result.expectedStampRates[i])
//                         expect(results[i].uids[0]).toBe(c.data.uid)
//                     }
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign tests', () => {
//     describe('ランチスタンプ、及びディナースタンプが所定の数に達したとき、ユーザーにクーポンを配布するキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created stamp exchange campaign for users whose stamp count reached a specified count of exchangable coupon', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.lunch,
//                         targetCouponDocIDs: ['lfuvCqIJECYWSdkvOSz4'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData1,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 3,
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['oIMLNuQHAPm6TrDw82dW'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData5,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(1)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(c.targetStampRate)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 const logData = logSnapshot.docs[0].data()
//                 expect(logData.uid).toBe(c.uid)
//                 expect(logData.stampRate).toBe(c.targetStampRate)
//                 expect(logData.stampCategory).toBe(c.targetStampCategory)
//                 expect(logData.remindedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(logData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 expect(logData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-1, 'minute').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('指定したUIDのユーザーにクーポンを配布するキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created stamp exchange campaign for the uid specified user whose stamp count reached a specified count of exchangable coupon', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.lunch,
//                         targetCouponDocIDs: ['lfuvCqIJECYWSdkvOSz4'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData1,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 3,
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['oIMLNuQHAPm6TrDw82dW'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData5,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory, c.uid).catch((err) => {
//                     throw err
//                 })
//
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(1)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(c.targetStampRate)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 const logData = logSnapshot.docs[0].data()
//                 expect(logData.uid).toBe(c.uid)
//                 expect(logData.stampRate).toBe(c.targetStampRate)
//                 expect(logData.stampCategory).toBe(c.targetStampCategory)
//                 expect(logData.remindedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(logData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 expect(logData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-1, 'minute').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign tests', () => {
//     describe('ディナースタンプで3個と5個交換済みの状態で、10個交換したとき、10個配布のキャンペーンのみが作成され、リマインダーログがクリアされている', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: when 3 and 5 stamps exchaned user reaches 10 stamps, 10 stamp exchange coupon campaign is created, and reminder log all cleared', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 stampExchangeRemindLogFeedData: StampExchangeRemindLogModel[]
//                 createdCampaignCodes: string[]
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 10,
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['k4erb9yDWPprNq1IzRTh'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData4,
//                         stampExchangeRemindLogFeedData: stampExchangeRemindLogFeedData2,
//                         createdCampaignCodes: ['1'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampExchangeRemindLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.stampExchangeRemindLog)
//                             .doc(feedData.key)
//                             .set({
//                                 uid: feedData.uid,
//                                 stampRate: feedData.stampRate,
//                                 stampCategory: feedData.stampCategory,
//                                 remindedAt: feedData.remindedAt,
//                                 createdAt: feedData.createdAt,
//                                 updatedAt: feedData.updatedAt,
//                             })
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(c.createdCampaignCodes.length)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(c.targetStampRate)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(0)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[0])
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('ディナースタンプが５個溜まった状態で、ディナースタンプ３個を未受領の場合、両方のクーポンを配布するキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created stamp exchange campaign for stampRate3 and 5 if user does not have stampRate3 coupon yet', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date
//                 autoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['oIMLNuQHAPm6TrDw82dW', 'kDQb6nKpmWE9MPZqqVOB'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData3,
//                         createdCampaignCodes: ['1', '2'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         autoPushCampaignCode: '50001003',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(2)
//                 //Stamp Rate昇順でソートしているため、必ずStamp Rateの低いキャンペーンから生成される
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(3)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//                 expect(result[1].campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(result[1].targetUserCount).toBe(1)
//                 expect(result[1].uids).toEqual([c.uid])
//                 expect(result[1].stampRate).toBe(5)
//                 expect(result[1].stampCategory).toBe(c.targetStampCategory)
//
//                 let logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .where('stampRate', '==', 5)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 let logData = logSnapshot.docs[0].data()
//                 expect(logData.uid).toBe(c.uid)
//                 expect(logData.stampRate).toBe(5)
//                 expect(logData.stampCategory).toBe(c.targetStampCategory)
//                 expect(logData.remindedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(logData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 expect(logData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .where('stampRate', '==', 3)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 logData = logSnapshot.docs[0].data()
//                 expect(logData.uid).toBe(c.uid)
//                 expect(logData.stampRate).toBe(3)
//                 expect(logData.stampCategory).toBe(c.targetStampCategory)
//                 expect(logData.remindedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(logData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 expect(logData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//
//                 let couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 let campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 let data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//
//                 couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[1])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[1])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('ランチスタンプ、及びディナースタンプが10個に達したとき(それまでのクーポンは未交換)、ユーザーに未交換分も含めた、すべてのクーポンを配布するキャンペーンが生成される。またリマインダーログがクリアされる', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created stamp exchange campaign for users whose stamp count reached max count(10) of exchangable coupon, and clear reminder log', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 10,
//                         targetStampCategory: StampCategory.lunch,
//                         targetCouponDocIDs: ['tjQQaBXA2EkcZooyM6dk'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData2,
//                         createdCampaignCodes: ['1', '2'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 // stampRateが最も小さいものが先頭のデータとなる
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(c.createdCampaignCodes.length)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(5)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//                 expect(result[1].campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(result[1].targetUserCount).toBe(1)
//                 expect(result[1].uids).toEqual([c.uid])
//                 expect(result[1].stampRate).toBe(10)
//                 expect(result[1].stampCategory).toBe(c.targetStampCategory)
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[1])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-1, 'minute').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//                 expect(data.exchangedStampRate).toBe(c.targetStampRate)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 // 消しこんだstampCategoryのログだけ消えている
//                 expect(logSnapshot.docs.length).toBe(0)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created dinner stamp exchange campaign for users whose stamp count reached max count(10) of exchangable coupon, and clear reminder log', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 10,
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['k4erb9yDWPprNq1IzRTh'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData4,
//                         createdCampaignCodes: ['1', '2', '3'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 // stampRateが最も小さいものが先頭のデータとなる
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(c.createdCampaignCodes.length)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(3)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//                 expect(result[1].campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(result[1].targetUserCount).toBe(1)
//                 expect(result[1].uids).toEqual([c.uid])
//                 expect(result[1].stampRate).toBe(5)
//                 expect(result[1].stampCategory).toBe(c.targetStampCategory)
//                 expect(result[2].campaignCode).toBe(c.createdCampaignCodes[2])
//                 expect(result[2].targetUserCount).toBe(1)
//                 expect(result[2].uids).toEqual([c.uid])
//                 expect(result[2].stampRate).toBe(10)
//                 expect(result[2].stampCategory).toBe(c.targetStampCategory)
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[2])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[2])
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-1, 'minute').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//                 expect(data.exchangedStampRate).toBe(c.targetStampRate)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 // 消しこんだstampCategoryのログだけ消えている
//                 expect(logSnapshot.docs.length).toBe(0)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('スタンプが15個に達したとき(それまでのクーポンは未交換)、10個交換の消込と5個クーポン配布が実行され、未利用スタンプが5個残っている', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: if user has 15 stamps, 10 and 5 stamp coupon exchanged, and 5 available stamps remains', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 10,
//                         targetStampCategory: StampCategory.lunch,
//                         targetCouponDocIDs: ['tjQQaBXA2EkcZooyM6dk'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData7,
//                         createdCampaignCodes: ['1', '2'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換し���ご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 // stampRateが最も小さいものが先頭のデータとなる
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(c.createdCampaignCodes.length)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(5)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//                 expect(result[1].campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(result[1].targetUserCount).toBe(1)
//                 expect(result[1].uids).toEqual([c.uid])
//                 expect(result[1].stampRate).toBe(10)
//                 expect(result[1].stampCategory).toBe(c.targetStampCategory)
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[1])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[1])
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-1, 'minute').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//                 expect(data.exchangedStampRate).toBe(c.targetStampRate)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 // 消しこんだstampCategoryのログだけ消えている
//                 expect(logSnapshot.docs.length).toBe(0)
//
//                 // 交換されていないスタンプは未利用で残っている
//                 const userStampSnapshot = await store
//                     .collection(firestoreCollectionName.users)
//                     .doc(c.uid)
//                     .collection(firestoreCollectionName.userStamps)
//                     .where('usedDate', '==', null)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(userStampSnapshot.docs.length).toBe(5)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('複数のユーザーが規定の数のスタンプを所持している場合、該当するユーザーすべてにクーポンが配布されるキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created stamp exchange campaign for multiple users who have enough stamps to exchange', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uids: string[]
//                 userIds: string[]
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date
//                 autoPushCampaignCode: string | null
//             }[] = [
//                     {
//                         uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63'],
//                         userIds: ['1001', '1002'],
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['oIMLNuQHAPm6TrDw82dW'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData5,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         autoPushCampaignCode: '50001003',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[0])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uids[1])
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(1)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(2)
//                 expect(result[0].uids.sort()).toEqual(c.uids.sort())
//                 expect(result[0].stampRate).toBe(3)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('stampRate', '==', 3)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(2)
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(data.couponDocIDs[0]).toBe(couponSnapshot.id)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('スタンプ数が規定数に満たない場合、キャンペーンは生成されない', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: No campaign created if no user has enough stamps to exchange', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.lunch,
//                         targetCouponDocIDs: ['lfuvCqIJECYWSdkvOSz4'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData6,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(0)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('[丸源] ランチスタンプ、及びディナースタンプが所定の数に達したとき、StampExchangeCouponDeliveredNotificationLogデータが生成される', (): void => {
//         test('[marugen only] CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created StampExchangeCouponDeliveredNotificationLog for users whose stamp count reached a specified count of exchangable coupon', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.marugen
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 availableStampCount: number
//                 expiredStampCount: number
//                 usedStampCount: number
//                 targetUID: string
//                 targetStampCategory: StampCategoryType
//                 resultLogs: {
//                     uid: string
//                     stampRate: number
//                     stampCategory: StampCategoryType
//                     round: number
//                     couponDeliveredBannerShownAt: Date | null
//                     completedStampCardShownAt: Date | null
//                 }[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         availableStampCount: 5,
//                         expiredStampCount: 5,
//                         usedStampCount: 0,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.lunch,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         availableStampCount: 10,
//                         expiredStampCount: 0,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.lunch,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         availableStampCount: 5,
//                         expiredStampCount: 5,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         availableStampCount: 10,
//                         expiredStampCount: 5,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeCouponDeliveredNotificationLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(c.resultLogs.length)
//
//                 for (const result of c.resultLogs) {
//                     const targetLog = logSnapshot.docs
//                         .filter((v) => {
//                             return v.data().uid === result.uid
//                         })
//                         .filter((v) => {
//                             return v.data().stampRate === result.stampRate
//                         })
//                         .filter((v) => {
//                             return v.data().stampCategory === result.stampCategory
//                         })
//                         .filter((v) => {
//                             return v.data().round === result.round
//                         })
//                         .shift()
//                     expect(targetLog).not.toBeUndefined()
//                     const targetLogData = targetLog!.data()
//                     expect(targetLogData.uid).toBe(result.uid)
//                     expect(targetLogData.stampRate).toBe(result.stampRate)
//                     expect(targetLogData.stampCategory).toBe(result.stampCategory)
//                     expect(targetLogData.round).toEqual(result.round)
//                     expect(targetLogData.couponDeliveredBannerShownAt).toBeNull()
//                     expect(targetLogData.completedStampCardShownAt).toBeNull()
//                     expect(targetLogData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                     expect(targetLogData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('[丸源] 同一のstampRateとstampCategoryのlogが存在する場合、roundがインクリメントされた新しいLogが生成される', (): void => {
//         test('[marugen only] CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created round up log if the same stampRate and stampCategory log exists', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.marugen
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampExchangeCouponDeliveredNotificationLogFeedData: StampExchangeCouponDeliveredNotificationLogModel[]
//                 availableStampCount: number
//                 expiredStampCount: number
//                 usedStampCount: number
//                 targetUID: string
//                 targetStampCategory: StampCategoryType
//                 resultLogs: {
//                     uid: string
//                     stampRate: number
//                     stampCategory: StampCategoryType
//                     round: number
//                     couponDeliveredBannerShownAt: Date | null
//                     completedStampCardShownAt: Date | null
//                 }[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampExchangeCouponDeliveredNotificationLogFeedData: stampExchangeCouponDeliveredNotificationLogFeedData1,
//                         availableStampCount: 5,
//                         expiredStampCount: 0,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.lunch,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData12,
//                         stampExchangeCouponDeliveredNotificationLogFeedData: stampExchangeCouponDeliveredNotificationLogFeedData4,
//                         availableStampCount: 10,
//                         expiredStampCount: 0,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.lunch,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: moment().add(-3, 'days').toDate(),
//                                 completedStampCardShownAt: moment().add(-2, 'days').toDate(),
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: moment().add(-2, 'days').toDate(),
//                                 completedStampCardShownAt: moment().add(-1, 'days').toDate(),
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 3,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampExchangeCouponDeliveredNotificationLogFeedData: stampExchangeCouponDeliveredNotificationLogFeedData2,
//                         availableStampCount: 5,
//                         expiredStampCount: 0,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampExchangeCouponDeliveredNotificationLogFeedData: stampExchangeCouponDeliveredNotificationLogFeedData3,
//                         availableStampCount: 5,
//                         expiredStampCount: 0,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampExchangeCouponDeliveredNotificationLogFeedData: stampExchangeCouponDeliveredNotificationLogFeedData2,
//                         availableStampCount: 10,
//                         expiredStampCount: 0,
//                         usedStampCount: 0,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampExchangeCouponDeliveredNotificationLogFeedData: stampExchangeCouponDeliveredNotificationLogFeedData2,
//                         availableStampCount: 13,
//                         expiredStampCount: 0,
//                         usedStampCount: 0,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.dinner,
//                         resultLogs: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 3,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.dinner,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//
//                 await Promise.all(
//                     c.stampExchangeCouponDeliveredNotificationLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.stampExchangeCouponDeliveredNotificationLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeCouponDeliveredNotificationLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(c.resultLogs.length)
//                 // for (const doc of logSnapshot.docs) {
//                 //     console.log(`round: ${doc.data().round} stampRate: ${doc.data().stampRate}`)
//                 // }
//
//                 for (const result of c.resultLogs) {
//                     const targetLog = logSnapshot.docs
//                         .filter((v) => {
//                             return v.data().uid === result.uid
//                         })
//                         .filter((v) => {
//                             return v.data().stampRate === result.stampRate
//                         })
//                         .filter((v) => {
//                             return v.data().stampCategory === result.stampCategory
//                         })
//                         .filter((v) => {
//                             return v.data().round === result.round
//                         })
//                         .shift()
//                     expect(targetLog).not.toBeUndefined()
//                     const targetLogData = targetLog!.data()
//                     expect(targetLogData.uid).toBe(result.uid)
//                     expect(targetLogData.stampRate).toBe(result.stampRate)
//                     expect(targetLogData.stampCategory).toBe(result.stampCategory)
//                     expect(targetLogData.round).toEqual(result.round)
//                     if (result.couponDeliveredBannerShownAt === null) {
//                         expect(targetLogData.couponDeliveredBannerShownAt).toBeNull()
//                     } else {
//                         expect(moment(targetLogData.couponDeliveredBannerShownAt.toDate()).format('YYYYMMDD')).toBe(
//                             moment(result.couponDeliveredBannerShownAt).format('YYYYMMDD')
//                         )
//                     }
//                     if (result.completedStampCardShownAt === null) {
//                         expect(targetLogData.completedStampCardShownAt).toBeNull()
//                     } else {
//                         expect(moment(targetLogData.completedStampCardShownAt.toDate()).format('YYYYMMDD')).toBe(
//                             moment(result.completedStampCardShownAt).format('YYYYMMDD')
//                         )
//                     }
//                     expect(targetLogData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                     expect(targetLogData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('[丸源] ランチスタンプ、及びディナースタンプが1枚分以上のスタンプに一気に達したとき、StampExchangeCouponDeliveredNotificationLogデータは1周分だけ生成され、2回目の実行で残りのlogが生成される', (): void => {
//         test('[marugen only] CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created StampExchangeCouponDeliveredNotificationLog for users whose stamp count reached a more than 2 stamp cards', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.marugen
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 availableStampCount: number
//                 expiredStampCount: number
//                 usedStampCount: number
//                 targetUID: string
//                 targetStampCategory: StampCategoryType
//                 resultLogs1: {
//                     uid: string
//                     stampRate: number
//                     stampCategory: StampCategoryType
//                     round: number
//                     couponDeliveredBannerShownAt: Date | null
//                     completedStampCardShownAt: Date | null
//                 }[]
//                 resultLogs2: {
//                     uid: string
//                     stampRate: number
//                     stampCategory: StampCategoryType
//                     round: number
//                     couponDeliveredBannerShownAt: Date | null
//                     completedStampCardShownAt: Date | null
//                 }[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         availableStampCount: 20,
//                         expiredStampCount: 0,
//                         usedStampCount: 5,
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampCategory: StampCategory.lunch,
//                         resultLogs1: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                         resultLogs2: [
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 1,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 5,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                             {
//                                 uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                 stampRate: 10,
//                                 stampCategory: StampCategory.lunch,
//                                 round: 2,
//                                 couponDeliveredBannerShownAt: null,
//                                 completedStampCardShownAt: null,
//                             },
//                         ],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 for (var i = 1; i <= c.availableStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.expiredStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: true,
//                             shopId: 1001,
//                             timestamp: moment().tz('Asia/Tokyo').add(-1, 'year').add(-1, 'day').toDate(),
//                             usedDate: null,
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//                 for (var i = 1; i <= c.usedStampCount; i++) {
//                     await store
//                         .collection(firestoreCollectionName.users)
//                         .doc(c.targetUID)
//                         .collection(firestoreCollectionName.userStamps)
//                         .add({
//                             id: i,
//                             category: c.targetStampCategory,
//                             expired: false,
//                             shopId: 1001,
//                             timestamp: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .toDate(),
//                             usedDate: moment().tz('Asia/Tokyo').add(-1, 'week').toDate(),
//                             expiredDate: moment()
//                                 .tz('Asia/Tokyo')
//                                 .add(i * -1, 'day')
//                                 .add(1, 'year')
//                                 .toDate(),
//                         })
//                         .catch((err) => {
//                             throw err
//                         })
//                 }
//
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory).catch((err) => {
//                     throw err
//                 })
//                 await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 let logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeCouponDeliveredNotificationLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(c.resultLogs1.length)
//
//                 for (const result of c.resultLogs1) {
//                     const targetLog = logSnapshot.docs
//                         .filter((v) => {
//                             return v.data().uid === result.uid
//                         })
//                         .filter((v) => {
//                             return v.data().stampRate === result.stampRate
//                         })
//                         .filter((v) => {
//                             return v.data().stampCategory === result.stampCategory
//                         })
//                         .filter((v) => {
//                             return v.data().round === result.round
//                         })
//                         .shift()
//                     expect(targetLog).not.toBeUndefined()
//                     const targetLogData = targetLog!.data()
//                     expect(targetLogData.uid).toBe(result.uid)
//                     expect(targetLogData.stampRate).toBe(result.stampRate)
//                     expect(targetLogData.stampCategory).toBe(result.stampCategory)
//                     expect(targetLogData.round).toEqual(result.round)
//                     expect(targetLogData.couponDeliveredBannerShownAt).toBeNull()
//                     expect(targetLogData.completedStampCardShownAt).toBeNull()
//                     expect(targetLogData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                     expect(targetLogData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 }
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory, undefined, undefined).catch((err) => {
//                     throw err
//                 })
//                 await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeCouponDeliveredNotificationLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(c.resultLogs2.length)
//                 for (const result of c.resultLogs2) {
//                     const targetLog = logSnapshot.docs
//                         .filter((v) => {
//                             return v.data().uid === result.uid
//                         })
//                         .filter((v) => {
//                             return v.data().stampRate === result.stampRate
//                         })
//                         .filter((v) => {
//                             return v.data().stampCategory === result.stampCategory
//                         })
//                         .filter((v) => {
//                             return v.data().round === result.round
//                         })
//                         .shift()
//                     expect(targetLog).not.toBeUndefined()
//                     const targetLogData = targetLog!.data()
//                     expect(targetLogData.uid).toBe(result.uid)
//                     expect(targetLogData.stampRate).toBe(result.stampRate)
//                     expect(targetLogData.stampCategory).toBe(result.stampCategory)
//                     expect(targetLogData.round).toEqual(result.round)
//                     expect(targetLogData.couponDeliveredBannerShownAt).toBeNull()
//                     expect(targetLogData.completedStampCardShownAt).toBeNull()
//                     expect(targetLogData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                     expect(targetLogData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('指定したUIDのユーザーにクーポンを配布するキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.extractStampCouponCampaign / createStampCouponCampaign: Created stamp exchange campaign for the uid specified user whose stamp count reached a specified count of exchangable coupon', async (): Promise<void> => {
//             if (process.env.BRAND_CODE === BrandCode.yakinikuking) {
//                 return Promise.resolve()
//             }
//             const campaignUsecase = newCampaignUsecase(store, tx, newMessagingAPIRequest(messaging))
//             const testCase: {
//                 uid: string
//                 targetStampRate: number
//                 targetStampCategory: StampCategory
//                 targetCouponDocIDs: string[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 stampFeedData: UserStampModel[]
//                 createdCampaignCodes: string[]
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string | null
//                 notes: string | null
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//             }[] = [
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 5,
//                         targetStampCategory: StampCategory.lunch,
//                         targetCouponDocIDs: ['lfuvCqIJECYWSdkvOSz4'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData1,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                     {
//                         uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         targetStampRate: 3,
//                         targetStampCategory: StampCategory.dinner,
//                         targetCouponDocIDs: ['oIMLNuQHAPm6TrDw82dW'],
//                         autoPushFeedData: autoPushFeedData5,
//                         couponFeedData: couponFeedData5,
//                         stampFeedData: stampFeedData5,
//                         createdCampaignCodes: ['1'],
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         status: 0,
//                         title: 'クーポンに交換できるようになりました',
//                         summary:
//                             'スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。',
//                         shopCode: null,
//                         description: null,
//                         notes: null,
//                         image: null,
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:30:00+0900`).toDate(),
//                         campaignEnd: moment().tz('Asia/Tokyo').add(60, 'days').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: '50001003',
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     userFeedData1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExchangeRemind)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.extractStampCouponCampaign(c.targetStampCategory, c.uid).catch((err) => {
//                     throw err
//                 })
//                 const result = await campaignUsecase.createStampCouponCampaign().catch((err) => {
//                     throw err
//                 })
//                 expect(result.length).toBe(1)
//                 expect(result[0].campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(result[0].targetUserCount).toBe(1)
//                 expect(result[0].uids).toEqual([c.uid])
//                 expect(result[0].stampRate).toBe(c.targetStampRate)
//                 expect(result[0].stampCategory).toBe(c.targetStampCategory)
//
//                 const logSnapshot = await store
//                     .collection(firestoreCollectionName.stampExchangeRemindLog)
//                     .where('uid', '==', c.uid)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(logSnapshot.docs.length).toBe(1)
//                 const logData = logSnapshot.docs[0].data()
//                 expect(logData.uid).toBe(c.uid)
//                 expect(logData.stampRate).toBe(c.targetStampRate)
//                 expect(logData.stampCategory).toBe(c.targetStampCategory)
//                 expect(logData.remindedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(logData.createdAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//                 expect(logData.updatedAt.toDate().getTime()).toBeGreaterThan(moment().add(-1, 'minute').toDate().getTime())
//
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocIDs[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', c.createdCampaignCodes[0])
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.campaignCode).toBe(c.createdCampaignCodes[0])
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toEqual(couponSnapshot.id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-1, 'minute').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('campaignUsecase.notifyStampExpirationDate tests', () => {
//     describe('指定の期間に有効期限を迎えるスタンプを保持するユーザーにリマインド通知を送るキャンペーンが生成される', (): void => {
//         test('campaignUsecase.notifyStampExpirationDate: Created a campaign that remind a expiration date of stamps', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: { [key: string]: any }[]
//                 uid1: string
//                 stampFeedDataForUID1: UserStampModel[]
//                 uid1TargetStampCount: number
//                 uid2: string
//                 stampFeedDataForUID2: UserStampModel[]
//                 uid2TargetStampCount: number
//                 expiredDateFrom: Date
//                 expiredDateTo: Date
//                 expectedTargetUserIDs: string[]
//                 allRemindLogCount: number
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData7,
//                         userFeedData: userFeedData1,
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         stampFeedDataForUID1: stampFeedData8,
//                         uid1TargetStampCount: 2,
//                         uid2: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         stampFeedDataForUID2: stampFeedData9,
//                         uid2TargetStampCount: 0,
//                         expiredDateFrom: moment('2022-04-01T00:00:00+0900').toDate(),
//                         expiredDateTo: moment('2022-04-30T00:00:00+0900').toDate(),
//                         expectedTargetUserIDs: ['1001'],
//                         allRemindLogCount: 1,
//                     },
//                     {
//                         autoPushFeedData: autoPushFeedData7,
//                         userFeedData: userFeedData1,
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         uid1TargetStampCount: 2,
//                         stampFeedDataForUID1: stampFeedData8,
//                         uid2: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         stampFeedDataForUID2: stampFeedData8,
//                         uid2TargetStampCount: 2,
//                         expiredDateFrom: moment('2022-04-01T00:00:00+0900').toDate(),
//                         expiredDateTo: moment('2022-04-30T00:00:00+0900').toDate(),
//                         expectedTargetUserIDs: ['1001', '1002'],
//                         allRemindLogCount: 2,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExpirationReminder)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedDataForUID1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid1)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedDataForUID2.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid2)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyStampExpirationDate(c.expiredDateFrom, c.expiredDateTo).catch((err) => {
//                     throw err
//                 })
//                 expect(result.expiredTargetDateFrom).toEqual(c.expiredDateFrom)
//                 expect(result.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result.targetUserIDs.length).toBe(c.expectedTargetUserIDs.length)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', '1')
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a, b) => {
//                         if (a > b) {
//                             return 1
//                         } else {
//                             return -1
//                         }
//                     })
//                 ).toEqual(c.expectedTargetUserIDs)
//                 expect(campaignData.autoPushCampaignCode).toBe(AutoPushCampaignCode.stampExpirationReminder)
//
//                 const allRemindLogSnapshot = await store
//                     .collection(firestoreCollectionName.stampExpiredDateRemindLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(allRemindLogSnapshot.docs.length).toBe(c.allRemindLogCount)
//
//                 if (c.uid1TargetStampCount > 0) {
//                     const remindLogSnapshot1 = await store
//                         .collection(firestoreCollectionName.stampExpiredDateRemindLog)
//                         .where('uid', '==', c.uid1)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(remindLogSnapshot1.empty).toBeFalsy()
//                     const data1 = remindLogSnapshot1.docs[0].data()
//                     expect(data1.targetStampCount).toBe(c.uid1TargetStampCount)
//                     expect(data1.stampExpiredDateFrom.toDate()).toEqual(c.expiredDateFrom)
//                     expect(data1.stampExpiredDateTo.toDate()).toEqual(c.expiredDateTo)
//                 }
//
//                 if (c.uid2TargetStampCount > 0) {
//                     const remindLogSnapshot2 = await store
//                         .collection(firestoreCollectionName.stampExpiredDateRemindLog)
//                         .where('uid', '==', c.uid2)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(remindLogSnapshot2.empty).toBeFalsy()
//                     const data2 = remindLogSnapshot2.docs[0].data()
//                     expect(data2.targetStampCount).toBe(c.uid2TargetStampCount)
//                     expect(data2.stampExpiredDateFrom.toDate()).toEqual(c.expiredDateFrom)
//                     expect(data2.stampExpiredDateTo.toDate()).toEqual(c.expiredDateTo)
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('campaignUsecase.notifyStampExpirationDate: Created a no campaign if target users not found', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: { [key: string]: any }[]
//                 uid1: string
//                 stampFeedDataForUID1: UserStampModel[]
//                 uid2: string
//                 stampFeedDataForUID2: UserStampModel[]
//                 expiredDateFrom: Date
//                 expiredDateTo: Date
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData7,
//                         userFeedData: userFeedData1,
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         stampFeedDataForUID1: stampFeedData8,
//                         uid2: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         stampFeedDataForUID2: stampFeedData9,
//                         expiredDateFrom: moment('2022-05-01T00:00:00+0900').toDate(),
//                         expiredDateTo: moment('2022-05-30T00:00:00+0900').toDate(),
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExpirationReminder)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedDataForUID1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid1)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedDataForUID2.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid2)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyStampExpirationDate(c.expiredDateFrom, c.expiredDateTo).catch((err) => {
//                     throw err
//                 })
//                 expect(result.expiredTargetDateFrom).toEqual(c.expiredDateFrom)
//                 expect(result.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result.targetUserIDs.length).toBe(0)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeTruthy()
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//
//     describe('指定した有効期限のリマインド通知が生成された後、再度同じ期間で実行してもキャンペーンは生成されない', (): void => {
//         test('campaignUsecase.notifyStampExpirationDate: Created a no campaign if the same expiration date reminder have been notified', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: { [key: string]: any }[]
//                 uid1: string
//                 stampFeedDataForUID1: UserStampModel[]
//                 uid2: string
//                 stampFeedDataForUID2: UserStampModel[]
//                 expiredDateFrom: Date
//                 expiredDateTo: Date
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData7,
//                         userFeedData: userFeedData1,
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         stampFeedDataForUID1: stampFeedData8,
//                         uid2: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         stampFeedDataForUID2: stampFeedData8,
//                         expiredDateFrom: moment('2022-04-01T00:00:00+0900').toDate(),
//                         expiredDateTo: moment('2022-04-30T00:00:00+0900').toDate(),
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.stampExpirationReminder)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedDataForUID1.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid1)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.stampFeedDataForUID2.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid2)
//                             .collection(firestoreCollectionName.userStamps)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result1 = await campaignUsecase.notifyStampExpirationDate(c.expiredDateFrom, c.expiredDateTo).catch((err) => {
//                     throw err
//                 })
//                 expect(result1.expiredTargetDateFrom).toEqual(c.expiredDateFrom)
//                 expect(result1.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result1.targetUserIDs.length).toBeGreaterThan(0)
//                 let campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//
//                 const result2 = await campaignUsecase.notifyStampExpirationDate(c.expiredDateFrom, c.expiredDateTo).catch((err) => {
//                     throw err
//                 })
//                 expect(result2.expiredTargetDateFrom).toEqual(c.expiredDateFrom)
//                 expect(result2.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result2.targetUserIDs.length).toBe(0)
//                 campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('campaignUsecase.notifyCouponExpirationDate tests', () => {
//     describe('指定の期間に有効期限を迎えるクーポンを保持するユーザーにリマインド通知を送るキャンペーンが生成される', (): void => {
//         test('campaignUsecase.notifyCouponExpirationDate: Created a campaign that remind a expiration date of coupons', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: { [key: string]: any }[]
//                 couponFeedData: CouponModel[]
//                 targetCouponDocID: string
//                 uid1: string
//                 userCouponFeedDataForUID1: { [key: string]: any }[]
//                 uid1TargetCouponCount: number
//                 uid2: string
//                 userCouponFeedDataForUID2: { [key: string]: any }[]
//                 uid2TargetCouponCount: number
//                 expiredDateFrom: Date
//                 expiredDateTo: Date
//                 expectedTargetUserIDs: string[]
//                 allRemindLogCount: number
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData8,
//                         userFeedData: userFeedData1,
//                         couponFeedData: couponFeedData2,
//                         targetCouponDocID: 'YV6nCaMwTUELW232ev6A',
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         userCouponFeedDataForUID1: userCouponsFeedData1,
//                         uid1TargetCouponCount: 2,
//                         uid2: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         userCouponFeedDataForUID2: userCouponsFeedData2,
//                         uid2TargetCouponCount: 0,
//                         expiredDateFrom: moment().add(2, 'week').startOf('day').toDate(),
//                         expiredDateTo: moment().add(2, 'week').endOf('day').toDate(),
//                         expectedTargetUserIDs: ['1001'],
//                         allRemindLogCount: 1,
//                     },
//                     {
//                         autoPushFeedData: autoPushFeedData8,
//                         userFeedData: userFeedData1,
//                         couponFeedData: couponFeedData2,
//                         targetCouponDocID: 'YV6nCaMwTUELW232ev6A',
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         userCouponFeedDataForUID1: userCouponsFeedData1,
//                         uid1TargetCouponCount: 2,
//                         uid2: 'IWSvISHeZYY2I0PgAlewd8UoSb63',
//                         userCouponFeedDataForUID2: userCouponsFeedData1,
//                         uid2TargetCouponCount: 2,
//                         expiredDateFrom: moment().add(2, 'week').startOf('day').toDate(),
//                         expiredDateTo: moment().add(2, 'week').endOf('day').toDate(),
//                         expectedTargetUserIDs: ['1001', '1002'],
//                         allRemindLogCount: 2,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.couponExpirationReminder)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 await Promise.all(
//                     c.userCouponFeedDataForUID1.map(async (feedData: any) => {
//                         feedData.coupon = couponSnapshot.ref
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid1)
//                             .collection(firestoreCollectionName.userCoupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userCouponFeedDataForUID2.map(async (feedData: any) => {
//                         feedData.coupon = couponSnapshot.ref
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid2)
//                             .collection(firestoreCollectionName.userCoupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyCouponExpirationDate(c.expiredDateFrom, c.expiredDateTo).catch((err) => {
//                     throw err
//                 })
//                 expect(result.expiredTargetDateFrom).toEqual(c.expiredDateFrom)
//                 expect(result.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result.targetUserIDs.length).toBe(c.expectedTargetUserIDs.length)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', '1')
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a, b) => {
//                         if (a > b) {
//                             return 1
//                         } else {
//                             return -1
//                         }
//                     })
//                 ).toEqual(c.expectedTargetUserIDs)
//                 expect(campaignData.autoPushCampaignCode).toBe(AutoPushCampaignCode.couponExpirationReminder)
//                 expect(campaignData.meta).toBe(
//                     JSON.stringify({
//                         expiredDateFrom: moment(c.expiredDateFrom).format(),
//                         expiredDateTo: moment(c.expiredDateTo).format(),
//                     })
//                 )
//
//                 const allRemindLogSnapshot = await store
//                     .collection(firestoreCollectionName.couponExpiredDateRemindLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(allRemindLogSnapshot.docs.length).toBe(c.allRemindLogCount)
//
//                 if (c.uid1TargetCouponCount > 0) {
//                     const remindLogSnapshot1 = await store
//                         .collection(firestoreCollectionName.couponExpiredDateRemindLog)
//                         .where('uid', '==', c.uid1)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(remindLogSnapshot1.empty).toBeFalsy()
//                     const data1 = remindLogSnapshot1.docs[0].data()
//                     expect(data1.targetCouponCount).toBe(c.uid1TargetCouponCount)
//                     expect(data1.couponExpiredDateFrom.toDate()).toEqual(c.expiredDateFrom)
//                     expect(data1.couponExpiredDateTo.toDate()).toEqual(c.expiredDateTo)
//                 }
//
//                 if (c.uid2TargetCouponCount > 0) {
//                     const remindLogSnapshot2 = await store
//                         .collection(firestoreCollectionName.couponExpiredDateRemindLog)
//                         .where('uid', '==', c.uid2)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(remindLogSnapshot2.empty).toBeFalsy()
//                     const data2 = remindLogSnapshot2.docs[0].data()
//                     expect(data2.targetCouponCount).toBe(c.uid2TargetCouponCount)
//                     expect(data2.couponExpiredDateFrom.toDate()).toEqual(c.expiredDateFrom)
//                     expect(data2.couponExpiredDateTo.toDate()).toEqual(c.expiredDateTo)
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//         test('campaignUsecase.notifyCouponExpirationDate: Created a no campaign if target users not found', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: { [key: string]: any }[]
//                 couponFeedData: CouponModel[]
//                 targetCouponDocID: string
//                 uid1: string
//                 userCouponFeedDataForUID1: { [key: string]: any }[]
//                 uid1TargetCouponCount: number
//                 expiredDateFrom: Date
//                 expiredDateTo: Date
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData8,
//                         userFeedData: userFeedData1,
//                         couponFeedData: couponFeedData2,
//                         targetCouponDocID: 'YV6nCaMwTUELW232ev6A',
//                         uid1: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         userCouponFeedDataForUID1: userCouponsFeedData2,
//                         uid1TargetCouponCount: 0,
//                         expiredDateFrom: moment().add(2, 'week').startOf('day').toDate(),
//                         expiredDateTo: moment().add(2, 'week').endOf('day').toDate(),
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.couponExpirationReminder)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store
//                     .collection(firestoreCollectionName.coupons)
//                     .doc(c.targetCouponDocID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 await Promise.all(
//                     c.userCouponFeedDataForUID1.map(async (feedData: any) => {
//                         feedData.coupon = couponSnapshot.ref
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(c.uid1)
//                             .collection(firestoreCollectionName.userCoupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase.notifyCouponExpirationDate(c.expiredDateFrom, c.expiredDateTo).catch((err) => {
//                     throw err
//                 })
//                 expect(result.expiredTargetDateFrom).toEqual(c.expiredDateFrom)
//                 expect(result.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result.targetUserIDs.length).toBe(0)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', '1')
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeTruthy()
//
//                 const allRemindLogSnapshot = await store
//                     .collection(firestoreCollectionName.couponExpiredDateRemindLog)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(allRemindLogSnapshot.docs.length).toBe(0)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('campaignUsecase.notifyYKPDItemExchangeExpirationDate tests', () => {
//     describe('指定の期間にアイテム交換期限を迎えるアイテムを保持するユーザーにリマインド通知を送るキャンペーンが生成される', (): void => {
//         test('campaignUsecase.notifyYKPDItemExchangeExpirationDate: Created a campaign that remind a ykpd item exchange expiration date', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 userFeedData: { [key: string]: any }[]
//                 ykpdGiftRequestFeedData: YKPDGiftRequestModel[]
//                 expiredDateFrom: Date | undefined
//                 expiredDateTo: Date | undefined
//                 expectedTargetUserIDs: string[]
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData13,
//                         userFeedData: userFeedData1,
//                         ykpdGiftRequestFeedData: ykpdGiftRequestFeedData1,
//                         expiredDateFrom: undefined,
//                         expiredDateTo: undefined,
//                         expectedTargetUserIDs: ['1001', '1002'],
//                     },
//                     {
//                         autoPushFeedData: autoPushFeedData13,
//                         userFeedData: userFeedData1,
//                         ykpdGiftRequestFeedData: ykpdGiftRequestFeedData2,
//                         expiredDateFrom: undefined,
//                         expiredDateTo: undefined,
//                         expectedTargetUserIDs: ['1001'],
//                     },
//                     {
//                         autoPushFeedData: autoPushFeedData13,
//                         userFeedData: userFeedData1,
//                         ykpdGiftRequestFeedData: ykpdGiftRequestFeedData2,
//                         expiredDateFrom: moment().add(2, 'weeks').endOf('day').add(1, 'second').toDate(),
//                         expiredDateTo: moment().add(2, 'weeks').add(1, 'day').endOf('day').toDate(),
//                         expectedTargetUserIDs: ['1002'],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.ykpdItemExchangeExpirationReminder)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.ykpdGiftRequestFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.ykpdGiftRequest)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase
//                     .notifyYKPDItemExchangeExpirationDate(c.expiredDateFrom, c.expiredDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(result.expiredTargetDateFrom).toEqual(
//                     c.expiredDateFrom === undefined ? moment().add(2, 'weeks').startOf('day').toDate() : c.expiredDateFrom
//                 )
//                 expect(result.expiredTargetDateTo).toEqual(
//                     c.expiredDateTo === undefined ? moment().add(2, 'weeks').endOf('day').toDate() : c.expiredDateTo
//                 )
//                 // expect(result.expiredTargetDateTo).toEqual(c.expiredDateTo)
//                 expect(result.targetUserIDs.length).toBe(c.expectedTargetUserIDs.length)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', '1')
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.empty).toBeFalsy()
//                 const campaignData = campaignSnapshot.docs[0].data()
//                 expect(
//                     campaignData.userIds.split(',').sort((a, b) => {
//                         if (a > b) {
//                             return 1
//                         } else {
//                             return -1
//                         }
//                     })
//                 ).toEqual(c.expectedTargetUserIDs)
//                 expect(campaignData.autoPushCampaignCode).toBe(AutoPushCampaignCode.ykpdItemExchangeExpirationReminder)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.createAdditionalBirthdayMonthCampaign tests', () => {
//     describe('指定された配信予定日の誕生日クーポン配信キャンペーンが生成される', (): void => {
//         test('CampaignUsecase.createAdditionalBirthdayMonthCampaign: Created birthday coupon campaign by the specified delivery date', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 birthdayCampaignMissedUserFeedData: BirthdayCampaignMissedUserModel[]
//                 deliveryDate: string
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string
//                 notes: string
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//                 uidBulkUploadKey: string | null
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData1,
//                         couponFeedData: couponFeedData3,
//                         birthdayCampaignMissedUserFeedData: birthdayCampaignMissedUserFeedData1,
//                         deliveryDate: '20220422',
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:50:00+0900`).toDate(),
//                         status: 0,
//                         title: 'おこほんから誕生日プレゼント！',
//                         summary: 'サマリーです',
//                         shopCode: null,
//                         description: 'いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。',
//                         notes: '備考です',
//                         image: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T09:50:00+0900`).toDate(),
//                         campaignEnd: moment().add(60, 'days').add(-1, 'day').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: AutoPushCampaignCode.additionalBirthdayMonthCampaign,
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                         uidBulkUploadKey: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.birthdayMonthCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.birthdayCampaignMissedUserFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.birthdayCampaignMissedUsers)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.createAdditionalBirthdayMonthCampaign(c.deliveryDate).catch((err) => {
//                     throw err
//                 })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toBe(couponSnapshot.docs[0].id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-30, 'seconds').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//                 expect(data.uidBulkUploadKey).toBe(c.uidBulkUploadKey)
//
//                 const birthdayCampaignMissedUsersSnapshot = await store
//                     .collection(firestoreCollectionName.birthdayCampaignMissedUsers)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 for (const doc of birthdayCampaignMissedUsersSnapshot.docs) {
//                     const data = doc.data()
//                     expect(parseInt(data.deliveredCampaignCode)).toBeGreaterThan(0)
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('MonthCode/Quater毎にキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.createAdditionalBirthdayMonthCampaign: Created multiple campaigns if there are multiple month code and quater', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 birthdayCampaignMissedUserFeedData: BirthdayCampaignMissedUserModel[]
//                 deliveryDate: string
//                 expectedCampaignCount: number
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData1,
//                         couponFeedData: couponFeedData3,
//                         birthdayCampaignMissedUserFeedData: birthdayCampaignMissedUserFeedData2,
//                         deliveryDate: '20220422',
//                         expectedCampaignCount: 4,
//                     },
//                     {
//                         autoPushFeedData: autoPushFeedData1,
//                         couponFeedData: couponFeedData3,
//                         birthdayCampaignMissedUserFeedData: birthdayCampaignMissedUserFeedData3,
//                         deliveryDate: '20220422',
//                         expectedCampaignCount: 2,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.birthdayMonthCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.birthdayCampaignMissedUserFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.birthdayCampaignMissedUsers)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.createAdditionalBirthdayMonthCampaign(c.deliveryDate).catch((err) => {
//                     throw err
//                 })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(c.expectedCampaignCount)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('指定した配信予定日のデータがない場合、キャンペーンは生成されない', (): void => {
//         test('CampaignUsecase.createAdditionalBirthdayMonthCampaign: NO campaign created if no target delivery date record found', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 birthdayCampaignMissedUserFeedData: BirthdayCampaignMissedUserModel[]
//                 deliveryDate: string
//                 expectedCampaignCount: number
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData1,
//                         couponFeedData: couponFeedData3,
//                         birthdayCampaignMissedUserFeedData: birthdayCampaignMissedUserFeedData2,
//                         deliveryDate: '20220423',
//                         expectedCampaignCount: 0,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.birthdayMonthCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.birthdayCampaignMissedUserFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.birthdayCampaignMissedUsers)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.createAdditionalBirthdayMonthCampaign(c.deliveryDate).catch((err) => {
//                     throw err
//                 })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(c.expectedCampaignCount)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('指定した配信予定日のデータがすべて配信済みの場合、キャンペーンは生成されない', (): void => {
//         test('CampaignUsecase.createAdditionalBirthdayMonthCampaign: No campaign created if campaign delivered already', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 birthdayCampaignMissedUserFeedData: BirthdayCampaignMissedUserModel[]
//                 deliveryDate: string
//                 expectedCampaignCount: number
//             }[] = [
//                     {
//                         autoPushFeedData: autoPushFeedData1,
//                         couponFeedData: couponFeedData3,
//                         birthdayCampaignMissedUserFeedData: birthdayCampaignMissedUserFeedData4,
//                         deliveryDate: '20220422',
//                         expectedCampaignCount: 0,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.birthdayMonthCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.birthdayCampaignMissedUserFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.birthdayCampaignMissedUsers)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 await campaignUsecase.createAdditionalBirthdayMonthCampaign(c.deliveryDate).catch((err) => {
//                     throw err
//                 })
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(c.expectedCampaignCount)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.createOneMoreBirthdayMonthCouponCampaign tests', () => {
//     describe('期待される誕生日の追加クーポン配信キャンペーンが生成される', (): void => {
//         test('CampaignUsecase.createOneMoreBirthdayMonthCouponCampaign: Created coupon campaign with expected data field', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 targetUsedDateFrom: Date
//                 targetUsedDateTo: Date
//                 notifiedAt: Date | null
//                 status: number
//                 title: string
//                 summary: string
//                 shopCode: number | null
//                 description: string
//                 notes: string
//                 image: string | null
//                 movieURL: string | null
//                 hasCoupon: boolean
//                 campaignStart: Date | null
//                 campaignEnd: Date | null
//                 birth: number[] | null | undefined
//                 birthdayFrom: number | null | undefined
//                 birthdayTo: number | null | undefined
//                 couponExpiredAt: Date | null
//                 couponPublishAt: Date | null
//                 expiredAt: Date | null
//                 familyAge: number[] | null | undefined
//                 familyBirth: number[] | null | undefined
//                 gender: string | null | undefined
//                 lowerStamp: number | null | undefined
//                 upperStamp: number | null | undefined
//                 numberToSend: number | null | undefined
//                 post: number | null | undefined
//                 userIds: number[] | null
//                 publishAt: Date | null
//                 targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                 autoPushCampaignCode: string | null
//                 visitorPromotionTargetType: VisitorPromotionTargetType | null
//                 topicType: TopicType | null
//                 uidBulkUploadKey: string | null
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData9,
//                         couponFeedData: couponFeedData7,
//                         couponUsageLogFeedData: couponUsageLogFeedData1,
//                         targetUsedDateFrom: moment('2022-07-22T00:00:00+0900').toDate(),
//                         targetUsedDateTo: moment('2022-07-22T23:59:59+0900').toDate(),
//                         notifiedAt: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T11:30:00+0900`).toDate(),
//                         status: 0,
//                         title: '誕生日プレゼント！',
//                         summary: 'サマリーです',
//                         shopCode: null,
//                         description: 'いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。',
//                         notes: '備考です',
//                         image: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                         movieURL: null,
//                         hasCoupon: true,
//                         campaignStart: moment(`${moment().tz('Asia/Tokyo').format('YYYY-MM-DD')}T11:30:00+0900`).toDate(),
//                         campaignEnd: moment().add(60, 'days').add(-1, 'day').endOf('day').toDate(),
//                         birth: null,
//                         birthdayFrom: null,
//                         birthdayTo: null,
//                         couponExpiredAt: null,
//                         couponPublishAt: null,
//                         expiredAt: null,
//                         familyAge: null,
//                         familyBirth: null,
//                         gender: null,
//                         lowerStamp: null,
//                         upperStamp: null,
//                         numberToSend: 1,
//                         post: null,
//                         userIds: [1001],
//                         publishAt: null,
//                         targetShopCode: null,
//                         autoPushCampaignCode: AutoPushCampaignCode.oneMoreBirthdayMonthCoupon,
//                         visitorPromotionTargetType: null,
//                         topicType: null,
//                         uidBulkUploadKey: null,
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.oneMoreBirthdayMonthCoupon)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase
//                     .createOneMoreBirthdayMonthCouponCampaign(c.targetUsedDateFrom, c.targetUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 expect(result.campaignCode).toBe('1')
//                 expect(result.uids.length).toBe(1)
//                 expect(result.usedDateFrom).toEqual(c.targetUsedDateFrom)
//                 expect(result.usedDateTo).toEqual(c.targetUsedDateTo)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//                 expect(data.notifiedAt.toDate()).toEqual(c.notifiedAt)
//                 expect(data.status).toBe(c.status)
//                 expect(data.title).toBe(c.title)
//                 expect(data.summary).toBe(c.summary)
//                 expect(data.shopCode).toBe(c.shopCode)
//                 expect(data.description).toBe(c.description)
//                 expect(data.notes).toBe(c.notes)
//                 expect(data.image).toBe(c.image)
//                 expect(data.movieURL).toBe(c.movieURL)
//                 expect(data.hasCoupon).toBe(c.hasCoupon)
//                 expect(data.couponDocIDs[0]).toBe(couponSnapshot.docs[0].id)
//                 expect(data.campaignStart.toDate()).toEqual(c.campaignStart)
//                 expect(data.campaignEnd.toDate().getTime()).toBeGreaterThan(moment(c.campaignEnd).add(-30, 'seconds').toDate().getTime())
//                 expect(data.birth).toEqual(c.birth)
//                 expect(data.birthdayFrom).toBe(c.birthdayFrom)
//                 expect(data.birthdayTo).toBe(c.birthdayTo)
//                 expect(data.couponExpiredAt).toEqual(c.couponExpiredAt)
//                 expect(data.couponPublishAt).toEqual(c.couponPublishAt)
//                 expect(data.expiredAt).toEqual(c.expiredAt)
//                 expect(data.familyAge).toEqual(c.familyAge)
//                 expect(data.familyBirth).toEqual(c.familyBirth)
//                 expect(data.gender).toBe(c.gender)
//                 expect(data.lowerStamp).toBe(c.lowerStamp)
//                 expect(data.upperStamp).toBe(c.upperStamp)
//                 expect(data.numberToSend).toBe(c.numberToSend)
//                 expect(data.post).toBe(c.post)
//                 expect(data.userIds).toEqual(c.userIds!.join(','))
//                 expect(data.publishAt).toEqual(c.publishAt)
//                 expect(data.targetShopCode).toEqual(c.targetShopCode)
//                 expect(data.autoPushCampaignCode).toBe(c.autoPushCampaignCode)
//                 expect(data.visitorPromotionTargetType).toBe(c.visitorPromotionTargetType)
//                 expect(data.topicType).toBe(c.topicType)
//                 expect(data.uidBulkUploadKey).toBe(c.uidBulkUploadKey)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('指定されたクーポン利用日のユーザーにクーポン配信キャンペーンが生成される', (): void => {
//         test('CampaignUsecase.createOneMoreBirthdayMonthCouponCampaign: Created coupon campaign by the specified coupon used date', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 targetUsedDateFrom: Date
//                 targetUsedDateTo: Date
//                 expectedUserIDs: number[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData9,
//                         couponFeedData: couponFeedData7,
//                         couponUsageLogFeedData: couponUsageLogFeedData2,
//                         targetUsedDateFrom: moment('2022-07-21T00:00:00+0900').toDate(),
//                         targetUsedDateTo: moment('2022-07-21T23:59:59+0900').toDate(),
//                         expectedUserIDs: [1001, 1002],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData9,
//                         couponFeedData: couponFeedData7,
//                         couponUsageLogFeedData: couponUsageLogFeedData2,
//                         targetUsedDateFrom: moment('2022-07-22T00:00:00+0900').toDate(),
//                         targetUsedDateTo: moment('2022-07-22T23:59:59+0900').toDate(),
//                         expectedUserIDs: [1003],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.oneMoreBirthdayMonthCoupon)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase
//                     .createOneMoreBirthdayMonthCouponCampaign(c.targetUsedDateFrom, c.targetUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 expect(result.campaignCode).toBe('1')
//                 expect(result.uids.length).toBe(c.expectedUserIDs.length)
//                 expect(result.usedDateFrom).toEqual(c.targetUsedDateFrom)
//                 expect(result.usedDateTo).toEqual(c.targetUsedDateTo)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//
//                 const userIDs = data.userIds.split(',').map((v: string) => parseInt(v)) as number[]
//                 userIDs.sort((a, b) => {
//                     if (a > b) {
//                         return 1
//                     } else {
//                         return -1
//                     }
//                 })
//                 expect(userIDs.length).toBe(c.expectedUserIDs.length)
//                 for (let i = 0; i < c.expectedUserIDs.length; i++) {
//                     expect(userIDs[i]).toBe(c.expectedUserIDs[i])
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('対象ユーザーが存在しない場合はキャンペーンは生成されない', (): void => {
//         test('CampaignUsecase.createOneMoreBirthdayMonthCouponCampaign: Not created coupon campaign if no target user found', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 targetUsedDateFrom: Date
//                 targetUsedDateTo: Date
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData9,
//                         couponFeedData: couponFeedData7,
//                         couponUsageLogFeedData: couponUsageLogFeedData2,
//                         targetUsedDateFrom: moment('2022-07-20T00:00:00+0900').toDate(),
//                         targetUsedDateTo: moment('2022-07-20T23:59:59+0900').toDate(),
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.oneMoreBirthdayMonthCoupon)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const result = await campaignUsecase
//                     .createOneMoreBirthdayMonthCouponCampaign(c.targetUsedDateFrom, c.targetUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(result.campaignCode).toBe('')
//                 expect(result.uids.length).toBe(0)
//                 expect(result.usedDateFrom).toEqual(c.targetUsedDateFrom)
//                 expect(result.usedDateTo).toEqual(c.targetUsedDateTo)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(0)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('同日のクーポン利用日の範囲を指定して実行した場合、２回目はキャンペーンは生成されない', (): void => {
//         test('CampaignUsecase.createOneMoreBirthdayMonthCouponCampaign: Campaign created once if runs with the same coupon used date range', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 targetUsedDateFrom: Date
//                 targetUsedDateTo: Date
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData9,
//                         couponFeedData: couponFeedData7,
//                         couponUsageLogFeedData: couponUsageLogFeedData1,
//                         targetUsedDateFrom: moment('2022-07-22T00:00:00+0900').toDate(),
//                         targetUsedDateTo: moment('2022-07-22T23:59:59+0900').toDate(),
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.oneMoreBirthdayMonthCoupon)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 let result = await campaignUsecase
//                     .createOneMoreBirthdayMonthCouponCampaign(c.targetUsedDateFrom, c.targetUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 expect(result.campaignCode).toBe('1')
//                 expect(result.uids.length).toBe(1)
//                 expect(result.usedDateFrom).toEqual(c.targetUsedDateFrom)
//                 expect(result.usedDateTo).toEqual(c.targetUsedDateTo)
//
//                 let campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//
//                 // 2回目の実行
//                 result = await campaignUsecase
//                     .createOneMoreBirthdayMonthCouponCampaign(c.targetUsedDateFrom, c.targetUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//
//                 expect(result.campaignCode).toBe('')
//                 expect(result.uids.length).toBe(0)
//                 expect(result.usedDateFrom).toEqual(c.targetUsedDateFrom)
//                 expect(result.usedDateTo).toEqual(c.targetUsedDateTo)
//
//                 campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('CampaignUsecase.createRepeatableCouponCampaign tests', () => {
//     describe('前日に無料パスポートを利用したユーザーに次のパスポートを配布するキャンペーンが生成される', (): void => {
//         test('CampaignUsecase.createRepeatableCouponCampaign: Repeatable coupon campaign created for users who used repeatable coupon yesterday', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const brandName = config.get<string>(`brandNameForUser.${process.env.BRAND_CODE}`)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 couponUsedDateFrom: Date
//                 couponUsedDateTo: Date
//                 results: {
//                     targetCouponDocID: string
//                     targetUIDs: string[]
//                     notifiedAt: Date | null
//                     status: number
//                     title: string
//                     summary: string
//                     shopCode: number | null
//                     description: string
//                     notes: string
//                     image: string | null
//                     movieURL: string | null
//                     hasCoupon: boolean
//                     campaignStart: Date | null
//                     campaignEnd: Date | null
//                     birth: number[] | null | undefined
//                     birthdayFrom: number | null | undefined
//                     birthdayTo: number | null | undefined
//                     couponExpiredAt: Date | null
//                     couponPublishAt: Date | null
//                     expiredAt: Date | null
//                     familyAge: number[] | null | undefined
//                     familyBirth: number[] | null | undefined
//                     gender: string | null | undefined
//                     lowerStamp: number | null | undefined
//                     upperStamp: number | null | undefined
//                     numberToSend: number | null | undefined
//                     post: number | null | undefined
//                     userIds: number[] | null
//                     publishAt: Date | null
//                     targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                     autoPushCampaignCode: string | null
//                     visitorPromotionTargetType: VisitorPromotionTargetType | null
//                     topicType: TopicType | null
//                     uidBulkUploadKey: string | null
//                 }[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData11,
//                         couponFeedData: couponFeedData9,
//                         couponUsageLogFeedData: couponUsageLogFeedData3,
//                         couponUsedDateFrom: moment().add(-1, 'day').startOf('day').toDate(),
//                         couponUsedDateTo: moment().add(-1, 'day').endOf('day').toDate(),
//                         results: [
//                             {
//                                 targetCouponDocID: 'ZV6nCaMwTUELW232ev6A',
//                                 targetUIDs: ['cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                                 notifiedAt: moment().startOf('hour').toDate(),
//                                 status: CampaignStatus.scheduled,
//                                 title: '餃子無料パスポートをお送りいたします',
//                                 summary: '餃子無料パスポートをお送りいたします。やったね！',
//                                 shopCode: null,
//                                 description: `平素より${brandName}をご利用いただき誠にありがとうございます。\n先日は餃子無料パスポートをご利用頂きありがとうございます。\n新しくお使いいただける餃子無料パスポートをお送り致しますので、ぜひご利用ください。`,
//                                 notes: '毎日一日１枚の利用となります',
//                                 image: null,
//                                 movieURL: null,
//                                 hasCoupon: true,
//                                 campaignStart: moment().startOf('hour').toDate(),
//                                 campaignEnd: moment().add(60, 'days').endOf('day').toDate(),
//                                 birth: null,
//                                 birthdayFrom: null,
//                                 birthdayTo: null,
//                                 couponExpiredAt: null,
//                                 couponPublishAt: null,
//                                 expiredAt: null,
//                                 familyAge: null,
//                                 familyBirth: null,
//                                 gender: null,
//                                 lowerStamp: null,
//                                 upperStamp: null,
//                                 numberToSend: 1,
//                                 post: null,
//                                 userIds: [1001],
//                                 publishAt: null,
//                                 targetShopCode: null,
//                                 autoPushCampaignCode: AutoPushCampaignCode.repeatableCouponCampaign,
//                                 visitorPromotionTargetType: null,
//                                 topicType: null,
//                                 uidBulkUploadKey: null,
//                             },
//                             {
//                                 targetCouponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                                 targetUIDs: ['ZWSvISHeZYY2I0PgAlewd8UoSb63', 'cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                                 notifiedAt: moment().startOf('hour').toDate(),
//                                 status: CampaignStatus.scheduled,
//                                 title: 'ラーメン無料パスポートをお送りいたします',
//                                 summary: 'ラーメン無料パスポートをお送りいたします。やったね！',
//                                 shopCode: null,
//                                 description: `平素より${brandName}をご利用いただき誠にありがとうございます。\n先日はラーメン無料パスポートをご利用頂きありがとうございます。\n新しくお使いいただけるラーメン無料パスポートをお送り致しますので、ぜひご利用ください。`,
//                                 notes: '●税込会計総額より15％割引いたします',
//                                 image: null,
//                                 movieURL: null,
//                                 hasCoupon: true,
//                                 campaignStart: moment().startOf('hour').toDate(),
//                                 campaignEnd: moment().tz('Asia/Tokyo').add(90, 'days').endOf('day').toDate(),
//                                 birth: null,
//                                 birthdayFrom: null,
//                                 birthdayTo: null,
//                                 couponExpiredAt: null,
//                                 couponPublishAt: null,
//                                 expiredAt: null,
//                                 familyAge: null,
//                                 familyBirth: null,
//                                 gender: null,
//                                 lowerStamp: null,
//                                 upperStamp: null,
//                                 numberToSend: 2,
//                                 post: null,
//                                 userIds: [1001, 1003],
//                                 publishAt: null,
//                                 targetShopCode: null,
//                                 autoPushCampaignCode: AutoPushCampaignCode.repeatableCouponCampaign,
//                                 visitorPromotionTargetType: null,
//                                 topicType: null,
//                                 uidBulkUploadKey: null,
//                             },
//                         ],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.repeatableCouponCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const campaignCreatedResults = await campaignUsecase
//                     .createRepeatableCouponCampaign(c.couponUsedDateFrom, c.couponUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignCreatedResults.length).toBe(c.results.length)
//                 for (const campaignCreatedResult of campaignCreatedResults) {
//                     const expectedResult = c.results.filter((v) => v.targetCouponDocID === campaignCreatedResult.couponDocID).shift()
//                     expect(expectedResult).not.toBeUndefined()
//                     expect(
//                         campaignCreatedResult.uids.sort((a, b) => {
//                             if (a > b) {
//                                 return 1
//                             } else {
//                                 return -1
//                             }
//                         })
//                     ).toEqual(expectedResult!.targetUIDs)
//
//                     const campaignSnapshot = await store
//                         .collection(firestoreCollectionName.campaigns)
//                         .where('campaignCode', '==', campaignCreatedResult.campaignCode)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(campaignSnapshot.empty).toBeFalsy()
//                     const data = campaignSnapshot.docs[0].data()
//                     expect(moment(data!.notifiedAt.toDate()).format('YYYYMMDDHH')).toEqual(
//                         moment(expectedResult!.notifiedAt).format('YYYYMMDDHH')
//                     )
//                     expect(data!.status).toBe(expectedResult!.status)
//                     expect(data!.title).toBe(expectedResult!.title)
//                     expect(data!.summary).toBe(expectedResult!.summary)
//                     expect(data!.shopCode).toBe(expectedResult!.shopCode)
//                     expect(data!.description).toBe(expectedResult!.description)
//                     expect(data!.notes).toBe(expectedResult!.notes)
//                     expect(data!.image).toBe(expectedResult!.image)
//                     expect(data!.movieURL).toBe(expectedResult!.movieURL)
//                     expect(data!.hasCoupon).toBe(expectedResult!.hasCoupon)
//                     expect(data!.couponDocIDs[0]).toBe(campaignCreatedResult.couponDocID)
//                     expect(moment(data!.campaignStart.toDate()).format('YYYYMMDDHH')).toBe(
//                         moment(expectedResult!.campaignStart).format('YYYYMMDDHH')
//                     )
//                     expect(moment(data!.campaignEnd.toDate()).format('YYYYMMDDHH')).toBe(
//                         moment(expectedResult!.campaignEnd).format('YYYYMMDDHH')
//                     )
//                     expect(data!.birth).toEqual(expectedResult!.birth)
//                     expect(data!.birthdayFrom).toBe(expectedResult!.birthdayFrom)
//                     expect(data!.birthdayTo).toBe(expectedResult!.birthdayTo)
//                     expect(data!.couponExpiredAt).toEqual(expectedResult!.couponExpiredAt)
//                     expect(data!.couponPublishAt).toEqual(expectedResult!.couponPublishAt)
//                     expect(data!.expiredAt).toEqual(expectedResult!.expiredAt)
//                     expect(data!.familyAge).toEqual(expectedResult!.familyAge)
//                     expect(data!.familyBirth).toEqual(expectedResult!.familyBirth)
//                     expect(data!.gender).toBe(expectedResult!.gender)
//                     expect(data!.lowerStamp).toBe(expectedResult!.lowerStamp)
//                     expect(data!.upperStamp).toBe(expectedResult!.upperStamp)
//                     expect(data!.numberToSend).toBe(expectedResult!.numberToSend)
//                     expect(data!.post).toBe(expectedResult!.post)
//                     expect(
//                         data!.userIds
//                             .split(',')
//                             .sort((a, b) => {
//                                 if (a > b) {
//                                     return 1
//                                 } else {
//                                     return -1
//                                 }
//                             })
//                             .join(',')
//                     ).toBe(expectedResult!.userIds!.join(','))
//                     expect(data!.publishAt).toEqual(expectedResult!.publishAt)
//                     expect(data!.targetShopCode).toEqual(expectedResult!.targetShopCode)
//                     expect(data!.autoPushCampaignCode).toBe(expectedResult!.autoPushCampaignCode)
//                     expect(data!.visitorPromotionTargetType).toBe(expectedResult!.visitorPromotionTargetType)
//                     expect(data!.topicType).toBe(expectedResult!.topicType)
//                     expect(data!.uidBulkUploadKey).toBe(expectedResult!.uidBulkUploadKey)
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('キャンペーン生成と同時にユーザークーポンデータも生成される', (): void => {
//         test('CampaignUsecase.createRepeatableCouponCampaign: Created expected user coupon data', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 couponUsedDateFrom: Date
//                 couponUsedDateTo: Date
//                 results: {
//                     targetCouponDocID: string
//                     targetUIDs: string[]
//                     userCouponExpiredAt: Date | null
//                 }[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData11,
//                         couponFeedData: couponFeedData10,
//                         couponUsageLogFeedData: couponUsageLogFeedData4,
//                         couponUsedDateFrom: moment().add(-1, 'day').startOf('day').toDate(),
//                         couponUsedDateTo: moment().add(-1, 'day').endOf('day').toDate(),
//                         results: [
//                             {
//                                 targetCouponDocID: 'ZV6nCaMwTUELW232ev6A',
//                                 targetUIDs: ['cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                                 userCouponExpiredAt: moment().add(1, 'week').toDate(),
//                             },
//                         ],
//                     },
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData11,
//                         couponFeedData: couponFeedData9,
//                         couponUsageLogFeedData: couponUsageLogFeedData3,
//                         couponUsedDateFrom: moment().add(-1, 'day').startOf('day').toDate(),
//                         couponUsedDateTo: moment().add(-1, 'day').endOf('day').toDate(),
//                         results: [
//                             {
//                                 targetCouponDocID: 'ZV6nCaMwTUELW232ev6A',
//                                 targetUIDs: ['cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                                 userCouponExpiredAt: moment().add(60, 'days').endOf('day').toDate(),
//                             },
//                             {
//                                 targetCouponDocID: 'bPjH1mNR2rvdrhRZ8oNa',
//                                 targetUIDs: ['ZWSvISHeZYY2I0PgAlewd8UoSb63', 'cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                                 userCouponExpiredAt: moment().add(90, 'days').endOf('day').toDate(),
//                             },
//                         ],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.repeatableCouponCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const campaignCreatedResults = await campaignUsecase
//                     .createRepeatableCouponCampaign(c.couponUsedDateFrom, c.couponUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignCreatedResults.length).toBe(c.results.length)
//                 for (const campaignCreatedResult of campaignCreatedResults) {
//                     const expectedResult = c.results.filter((v) => v.targetCouponDocID === campaignCreatedResult.couponDocID).shift()
//                     expect(expectedResult).not.toBeUndefined()
//
//                     for (const uid of expectedResult!.targetUIDs) {
//                         const userCouponSnapshot = await store
//                             .collection(firestoreCollectionName.users)
//                             .doc(uid)
//                             .collection(firestoreCollectionName.userCoupons)
//                             .where('notificationId', '==', campaignCreatedResult.campaignCode)
//                             .get()
//                             .catch((err) => {
//                                 throw err
//                             })
//                         expect(userCouponSnapshot.empty).toBeFalsy()
//                         expect(userCouponSnapshot.docs.length).toBe(1)
//                         const data = userCouponSnapshot.docs[0].data()
//                         expect(data!.coupon.id).toBe(expectedResult!.targetCouponDocID)
//                         expect(moment(data!.getAt.toDate()).format('YYYYMMDDHH')).toBe(moment().format('YYYYMMDDHH'))
//                         expect(moment(data!.expiredAt.toDate()).format('YYYYMMDDHH')).toBe(
//                             moment(expectedResult!.userCouponExpiredAt).format('YYYYMMDDHH')
//                         )
//                         expect(data!.flyerID).toBeNull()
//                         expect(data!.fromStamp).toBeNull()
//                         expect(data!.invitationCode).toBeNull()
//                         expect(data!.isWelcomeCoupon).toBeFalsy()
//                         expect(data!.shopCode).toBeNull()
//                         expect(data!.usedAt).toBeNull()
//                         expect(data!.visitorPromotionTargetType).toBeNull()
//                     }
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('クーポンに期限が設定されている場合、ユーザーに配布されるクーポンの期限も同じ値が設定される', (): void => {
//         test('CampaignUsecase.createRepeatableCouponCampaign: User coupon expired date is same as coupon expired date if it is not null', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 couponUsedDateFrom: Date
//                 couponUsedDateTo: Date
//                 results: {
//                     targetCouponDocID: string
//                     targetUIDs: string[]
//                     notifiedAt: Date | null
//                     campaignStart: Date | null
//                     campaignEnd: Date | null
//                 }[]
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData11,
//                         couponFeedData: couponFeedData10,
//                         couponUsageLogFeedData: couponUsageLogFeedData4,
//                         couponUsedDateFrom: moment().add(-1, 'day').startOf('day').toDate(),
//                         couponUsedDateTo: moment().add(-1, 'day').endOf('day').toDate(),
//                         results: [
//                             {
//                                 targetCouponDocID: 'ZV6nCaMwTUELW232ev6A',
//                                 targetUIDs: ['cvN5qBgRzaN7U6aPD3kk19LAGK42'],
//                                 notifiedAt: moment().startOf('hour').toDate(),
//                                 campaignStart: moment().startOf('hour').toDate(),
//                                 campaignEnd: moment().add(1, 'week').toDate(),
//                             },
//                         ],
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.repeatableCouponCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const campaignCreatedResults = await campaignUsecase
//                     .createRepeatableCouponCampaign(c.couponUsedDateFrom, c.couponUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignCreatedResults.length).toBe(c.results.length)
//                 for (const campaignCreatedResult of campaignCreatedResults) {
//                     const expectedResult = c.results.filter((v) => v.targetCouponDocID === campaignCreatedResult.couponDocID).shift()
//                     expect(expectedResult).not.toBeUndefined()
//                     expect(
//                         campaignCreatedResult.uids.sort((a, b) => {
//                             if (a > b) {
//                                 return 1
//                             } else {
//                                 return -1
//                             }
//                         })
//                     ).toEqual(expectedResult!.targetUIDs)
//
//                     const campaignSnapshot = await store
//                         .collection(firestoreCollectionName.campaigns)
//                         .where('campaignCode', '==', campaignCreatedResult.campaignCode)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(campaignSnapshot.empty).toBeFalsy()
//                     const data = campaignSnapshot.docs[0].data()
//                     expect(moment(data!.notifiedAt.toDate()).format('YYYYMMDDHH')).toEqual(
//                         moment(expectedResult!.notifiedAt).format('YYYYMMDDHH')
//                     )
//                     expect(moment(data!.campaignStart.toDate()).format('YYYYMMDDHH')).toBe(
//                         moment(expectedResult!.campaignStart).format('YYYYMMDDHH')
//                     )
//                     expect(moment(data!.campaignEnd.toDate()).format('YYYYMMDDHH')).toBe(
//                         moment(expectedResult!.campaignEnd).format('YYYYMMDDHH')
//                     )
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('同日に複数回実行しても対象ユーザーに生成されるキャンペーンとクーポンは重複しない', (): void => {
//         test('CampaignUsecase.createRepeatableCouponCampaign: Campaign and coupon is not created if those are created in a same day', async (): Promise<void> => {
//             const campaignUsecase = newCampaignUsecase(store)
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 couponUsageLogFeedData: CouponUsageLogModel[]
//                 couponUsedDateFrom: Date
//                 couponUsedDateTo: Date
//                 targetUID: string
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         autoPushFeedData: autoPushFeedData11,
//                         couponFeedData: couponFeedData10,
//                         couponUsageLogFeedData: couponUsageLogFeedData4,
//                         couponUsedDateFrom: moment().add(-1, 'day').startOf('day').toDate(),
//                         couponUsedDateTo: moment().add(-1, 'day').endOf('day').toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 const couponSnapshot = await store.collection(firestoreCollectionName.coupons).get()
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         const _data = Object.assign({}, feedData)
//                         _data.couponDocIDs = [couponSnapshot.docs[0].ref.id]
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(AutoPushCampaignCode.repeatableCouponCampaign)
//                             .set(_data)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponUsageLogFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.couponUsageLog)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 // 1回目実行
//                 const campaignCreatedResults1 = await campaignUsecase
//                     .createRepeatableCouponCampaign(c.couponUsedDateFrom, c.couponUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignCreatedResults1.length).toBe(1)
//
//                 const campaignSnapshot1 = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot1.docs.length).toBe(1)
//
//                 const userCouponSnapshot1 = await store
//                     .collection(firestoreCollectionName.users)
//                     .doc(c.targetUID)
//                     .collection(firestoreCollectionName.userCoupons)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(userCouponSnapshot1.docs.length).toBe(1)
//
//                 // 2回目実行
//                 const campaignCreatedResults2 = await campaignUsecase
//                     .createRepeatableCouponCampaign(c.couponUsedDateFrom, c.couponUsedDateTo)
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignCreatedResults2.length).toBe(0)
//
//                 const campaignSnapshot2 = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot2.docs.length).toBe(1)
//
//                 const userCouponSnapshot2 = await store
//                     .collection(firestoreCollectionName.users)
//                     .doc(c.targetUID)
//                     .collection(firestoreCollectionName.userCoupons)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(userCouponSnapshot2.docs.length).toBe(1)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })
//
// describe('[marugen] CampaignUsecase.sendVisitingCycleCampaign tests', () => {
//     describe('[丸源] 来店直後のユーザーに初回のキャンペーンが生成される', (): void => {
//         test('[marugen] CampaignUsecase.sendVisitingCycleCampaign: Created a first campaign for visiting cycle', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.marugen
//             const campaignUsecase = newCampaignUsecase(store)
//             const currentDateStr = '2023-03-01T00:00:00+0900'
//             const testCase: {
//                 userFeedData: { [key: string]: any }[]
//                 visitingCycleFeedData: VisitingCycleModel[]
//                 campaignFeedData: CampaignModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 forInitialApproach: boolean
//                 currentDate: Date
//                 result: {
//                     expectedVisitingCycleData: {
//                         uid: string
//                         deliveredAutoPushCampaignCode: string
//                         lastDeliveredCampaignCode: string
//                         approaching: boolean
//                     }[]
//                     notifiedAt: Date | null
//                     status: number
//                     title: string
//                     summary: string
//                     shopCode: number | null
//                     description: string
//                     notes: string
//                     image: string | null
//                     movieURL: string | null
//                     couponDocID: string[]
//                     hasCoupon: boolean
//                     campaignStart: Date | null
//                     campaignEnd: Date | null
//                     birth: number[] | null | undefined
//                     birthdayFrom: number | null | undefined
//                     birthdayTo: number | null | undefined
//                     couponExpiredAt: Date | null
//                     couponPublishAt: Date | null
//                     expiredAt: Date | null
//                     familyAge: number[] | null | undefined
//                     familyBirth: number[] | null | undefined
//                     gender: string | null | undefined
//                     lowerStamp: number | null | undefined
//                     upperStamp: number | null | undefined
//                     numberToSend: number | null | undefined
//                     post: number | null | undefined
//                     userIds: number[] | null
//                     publishAt: Date | null
//                     targetShopCode: { name: string; shopCode: string }[] | null | undefined
//                     autoPushCampaignCode: string | null
//                     visitorPromotionTargetType: VisitorPromotionTargetType | null
//                     topicType: TopicType | null
//                     uidBulkUploadKey: string | null
//                 }
//             }[] = [
//                     {
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData1,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: true,
//                         currentDate: moment(currentDateStr).toDate(),
//                         result: {
//                             expectedVisitingCycleData: [
//                                 {
//                                     uid: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                                     deliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                                     lastDeliveredCampaignCode: '1',
//                                     approaching: true,
//                                 },
//                                 {
//                                     uid: 'ZWSvISHeZYY2I0PgAlewd8UoSb63',
//                                     deliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                                     lastDeliveredCampaignCode: '1',
//                                     approaching: true,
//                                 },
//                             ],
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').toDate(),
//                             status: CampaignStatus.scheduled,
//                             title: '再来店券配布1',
//                             summary: 'ご来店感謝特別クーポンプレゼント！',
//                             shopCode: null,
//                             description: `先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。`,
//                             notes: '●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません',
//                             image: 'https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1',
//                             movieURL: null,
//                             couponDocID: ['1'],
//                             hasCoupon: true,
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').toDate(),
//                             campaignEnd: moment(currentDateStr).add(14, 'days').endOf('day').toDate(),
//                             birth: null,
//                             birthdayFrom: null,
//                             birthdayTo: null,
//                             couponExpiredAt: null,
//                             couponPublishAt: null,
//                             expiredAt: null,
//                             familyAge: null,
//                             familyBirth: null,
//                             gender: null,
//                             lowerStamp: null,
//                             upperStamp: null,
//                             numberToSend: 2,
//                             post: null,
//                             userIds: [1001, 1003],
//                             publishAt: null,
//                             targetShopCode: null,
//                             autoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                             visitorPromotionTargetType: null,
//                             topicType: null,
//                             uidBulkUploadKey: null,
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.visitingCycleFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.visitingCycles)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.campaignFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.campaigns)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const results = await campaignUsecase.sendVisitingCycleCampaign(c.forInitialApproach, c.currentDate).catch((err) => {
//                     throw err
//                 })
//                 expect(results.length).toBe(1)
//                 expect(results[0].autoPushCampaignCode).toBe(AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign)
//                 results[0].userIDs.sort((a, b) => {
//                     if (a > b) {
//                         return 1
//                     } else {
//                         return -1
//                     }
//                 })
//                 for (let i = 0; i < c.result.userIds!.length - 1; i++) {
//                     expect(results[0].userIDs[i]).toBe(c.result.userIds![i])
//                 }
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', '==', results[0].campaignCode)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(1)
//                 const data = campaignSnapshot.docs[0].data()
//
//                 expect(moment(data!.notifiedAt.toDate()).format('YYYYMMDDHH')).toEqual(moment(c.result.notifiedAt).format('YYYYMMDDHH'))
//                 expect(data!.status).toBe(c.result.status)
//                 expect(data!.title).toBe(c.result.title)
//                 expect(data!.summary).toBe(c.result.summary)
//                 expect(data!.shopCode).toBe(c.result.shopCode)
//                 expect(data!.description).toBe(c.result.description)
//                 expect(data!.notes).toBe(c.result.notes)
//                 expect(data!.image).toBe(c.result.image)
//                 expect(data!.movieURL).toBe(c.result.movieURL)
//                 expect(data!.hasCoupon).toBe(c.result.hasCoupon)
//                 expect(data!.couponDocIDs).toEqual(c.result.couponDocID)
//                 expect(moment(data!.campaignStart.toDate()).format('YYYYMMDDHH')).toBe(moment(c.result.campaignStart).format('YYYYMMDDHH'))
//                 expect(moment(data!.campaignEnd.toDate()).format('YYYYMMDDHH')).toBe(moment(c.result.campaignEnd).format('YYYYMMDDHH'))
//                 expect(data!.birth).toEqual(c.result.birth)
//                 expect(data!.birthdayFrom).toBe(c.result.birthdayFrom)
//                 expect(data!.birthdayTo).toBe(c.result.birthdayTo)
//                 expect(data!.couponExpiredAt).toEqual(c.result.couponExpiredAt)
//                 expect(data!.couponPublishAt).toEqual(c.result.couponPublishAt)
//                 expect(data!.expiredAt).toEqual(c.result.expiredAt)
//                 expect(data!.familyAge).toEqual(c.result.familyAge)
//                 expect(data!.familyBirth).toEqual(c.result.familyBirth)
//                 expect(data!.gender).toBe(c.result.gender)
//                 expect(data!.lowerStamp).toBe(c.result.lowerStamp)
//                 expect(data!.upperStamp).toBe(c.result.upperStamp)
//                 expect(data!.numberToSend).toBe(c.result.numberToSend)
//                 expect(data!.post).toBe(c.result.post)
//                 expect(
//                     data!.userIds
//                         .split(',')
//                         .sort((a, b) => {
//                             if (a > b) {
//                                 return 1
//                             } else {
//                                 return -1
//                             }
//                         })
//                         .join(',')
//                 ).toBe(c.result.userIds!.join(','))
//                 expect(data!.publishAt).toEqual(c.result.publishAt)
//                 expect(data!.targetShopCode).toEqual(c.result.targetShopCode)
//                 expect(data!.autoPushCampaignCode).toBe(c.result.autoPushCampaignCode)
//                 expect(data!.visitorPromotionTargetType).toBe(c.result.visitorPromotionTargetType)
//                 expect(data!.topicType).toBe(c.result.topicType)
//                 expect(data!.uidBulkUploadKey).toBe(c.result.uidBulkUploadKey)
//
//                 for (const userID of c.result.userIds!) {
//                     const userSnapshot = await store
//                         .collection(firestoreCollectionName.users)
//                         .where('id', '==', userID)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(userSnapshot.docs.length).toBe(1)
//
//                     const visitingCycleSnapshot = await store
//                         .collection(firestoreCollectionName.visitingCycles)
//                         .where('uid', '==', userSnapshot.docs[0].id)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     const targetExpectedData = c.result.expectedVisitingCycleData.filter((v) => v.uid === userSnapshot.docs[0].id).shift()!
//                     const visitingCycleData = visitingCycleSnapshot.docs[0].data()
//
//                     expect(visitingCycleData.lastDeliveredAutoPushCampaignCode).toBe(targetExpectedData.deliveredAutoPushCampaignCode)
//                     expect(visitingCycleData.lastDeliveredCampaignCode).toBe(targetExpectedData.lastDeliveredCampaignCode)
//                     expect(visitingCycleData.approaching).toBe(targetExpectedData.approaching)
//                 }
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('[丸源] ２回目以降のキャンペーンで来店周期に応じて期待されるキャンペーンが作成される', (): void => {
//         test('[marugen] CampaignUsecase.sendVisitingCycleCampaign: Created an expected campaign according to visiting cycle', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.marugen
//             const campaignUsecase = newCampaignUsecase(store)
//             const currentDateStr = '2023-03-01T00:00:00+0900'
//             const testCase: {
//                 description: string
//                 userFeedData: { [key: string]: any }[]
//                 visitingCycleFeedData: VisitingCycleModel[]
//                 campaignFeedData: CampaignModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 forInitialApproach: boolean
//                 currentDate: Date
//                 targetUID: string
//                 visitingCycle: number
//                 lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode
//                 lastDeliveredCampaignCode: string
//                 lastDeliveredCampaignEndDate: Date
//                 result: {
//                     createdCampaignCount: number
//                     lastDeliveredAutoPushCampaignCode: string | null
//                     lastDeliveredCampaignCode: string | null
//                     approaching: boolean
//                     notifiedAt: Date | null
//                     couponDocID: string[]
//                     campaignStart: Date | null
//                     campaignEnd: Date | null
//                     userIds: number[] | null
//                 }
//             }[] = [
//                     {
//                         description: '来店周期29 / 1回目の再来店券の期限が切れていない場合、2枚目は配布されない',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 29,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 0,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                             lastDeliveredCampaignCode: '500001',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['2'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期29 / 2回目の再来店券が配布される',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 29,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['2'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期29 / 2回目の再来店券が1日前に期限切れ。リマインドクーポンは配布されない',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 29,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 0,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                             lastDeliveredCampaignCode: '500001',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['2'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期29 / 2回目の再来店券が14日前に期限切れ。リマインドクーポンは配布されない',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 29,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-14, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 0,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                             lastDeliveredCampaignCode: '500001',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['2'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期29 / 2回目の再来店券が15日前に期限切れ。リマインドクーポン配布される',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 29,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-15, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRemindPromotion01Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['12'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(28 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期29 / リマインドクーポンが1日前に期限切れ。休眠抑制クーポン配布され、approaching=falseになる',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 29,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRemindPromotion01Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleReactivatePromotion01Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: false,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['13'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(60 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期56 / 2回目の再来店券が配布される',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 56,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['2'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期56 / 3回目の再来店券が配布される',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 56,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['3'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期56 / 3回目の再来店券が14日前に期限切れ。リマインドクーポンは配布されない',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 56,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 0,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
//                             lastDeliveredCampaignCode: '500001',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['2'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期56 / 3回目の再来店券が21日前に期限切れ。リマインドクーポンは配布されない',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 56,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-21, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 0,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
//                             lastDeliveredCampaignCode: '500001',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['3'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(14 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期56 / 3回目の再来店券が22日前に期限切れ。リマインドクーポンが配布される',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 56,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-22, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRemindPromotion01Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: true,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['12'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(28 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                     {
//                         description: '来店周期56 / リマインドクーポンが1日前に期限切れ。休眠抑制クーポンが配布される',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData2,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         targetUID: 'cvN5qBgRzaN7U6aPD3kk19LAGK42',
//                         visitingCycle: 56,
//                         lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleRemindPromotion01Campaign,
//                         lastDeliveredCampaignCode: '500001',
//                         lastDeliveredCampaignEndDate: moment(currentDateStr).add(-1, 'day').endOf('day').toDate(),
//                         result: {
//                             createdCampaignCount: 1,
//                             lastDeliveredAutoPushCampaignCode: AutoPushCampaignCode.visitingCycleReactivatePromotion01Campaign,
//                             lastDeliveredCampaignCode: '1',
//                             approaching: false,
//                             notifiedAt: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             couponDocID: ['13'],
//                             campaignStart: moment(currentDateStr).startOf('day').add(10, 'hours').add(0, 'minutes').toDate(),
//                             campaignEnd: moment(currentDateStr)
//                                 .add(60 * 1, 'days')
//                                 .endOf('day')
//                                 .toDate(),
//                             userIds: [1001],
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.visitingCycleFeedData.map(async (feedData) => {
//                         feedData.cycle = c.visitingCycle
//                         feedData.lastDeliveredAutoPushCampaignCode = c.lastDeliveredAutoPushCampaignCode
//                         feedData.lastDeliveredCampaignCode = c.lastDeliveredCampaignCode
//                         return store
//                             .collection(firestoreCollectionName.visitingCycles)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.campaignFeedData.map(async (feedData) => {
//                         feedData.campaignEnd = c.lastDeliveredCampaignEndDate
//                         feedData.autoPushCampaignCode = c.lastDeliveredAutoPushCampaignCode
//                         return store
//                             .collection(firestoreCollectionName.campaigns)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const results = await campaignUsecase.sendVisitingCycleCampaign(c.forInitialApproach, c.currentDate).catch((err) => {
//                     throw err
//                 })
//                 if (c.result.createdCampaignCount > 0) {
//                     expect(results.length).toBe(1)
//                     expect(results[0].autoPushCampaignCode).toBe(c.result.lastDeliveredAutoPushCampaignCode)
//                     results[0].userIDs.sort((a, b) => {
//                         if (a > b) {
//                             return 1
//                         } else {
//                             return -1
//                         }
//                     })
//                     for (let i = 0; i < c.result.userIds!.length - 1; i++) {
//                         expect(results[0].userIDs[i]).toBe(c.result.userIds![i])
//                     }
//
//                     const campaignSnapshot = await store
//                         .collection(firestoreCollectionName.campaigns)
//                         .where('campaignCode', '==', results[0].campaignCode)
//                         .get()
//                         .catch((err) => {
//                             throw err
//                         })
//                     expect(campaignSnapshot.docs.length).toBe(1)
//                     const data = campaignSnapshot.docs[0].data()
//
//                     expect(moment(data!.notifiedAt.toDate()).format('YYYYMMDDHH')).toEqual(moment(c.result.notifiedAt).format('YYYYMMDDHH'))
//                     expect(data!.couponDocIDs).toEqual(c.result.couponDocID)
//                     expect(moment(data!.campaignStart.toDate()).format('YYYYMMDDHH')).toBe(
//                         moment(c.result.campaignStart).format('YYYYMMDDHH')
//                     )
//                     expect(moment(data!.campaignEnd.toDate()).format('YYYYMMDDHH')).toBe(moment(c.result.campaignEnd).format('YYYYMMDDHH'))
//                     expect(
//                         data!.userIds
//                             .split(',')
//                             .sort((a, b) => {
//                                 if (a > b) {
//                                     return 1
//                                 } else {
//                                     return -1
//                                 }
//                             })
//                             .join(',')
//                     ).toBe(c.result.userIds!.join(','))
//                     expect(data!.autoPushCampaignCode).toBe(c.result.lastDeliveredAutoPushCampaignCode)
//                 }
//
//                 const visitingCycleSnapshot = await store
//                     .collection(firestoreCollectionName.visitingCycles)
//                     .where('uid', '==', c.targetUID)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 const visitingCycleData = visitingCycleSnapshot.docs[0].data()
//
//                 expect(visitingCycleData.lastDeliveredAutoPushCampaignCode).toBe(c.result.lastDeliveredAutoPushCampaignCode)
//                 expect(visitingCycleData.lastDeliveredCampaignCode).toBe(c.result.lastDeliveredCampaignCode)
//                 expect(visitingCycleData.approaching).toBe(c.result.approaching)
//
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
//     describe('[丸源] 複数のキャンペーンが同時生成される場合、キャンペーンの配信時刻が90秒ずつずれて生成される', (): void => {
//         test('[marugen] CampaignUsecase.sendVisitingCycleCampaign: Created campaign notified date is dislocated 90 seconds at a time', async (): Promise<void> => {
//             process.env.BRAND_CODE = BrandCode.marugen
//             const campaignUsecase = newCampaignUsecase(store)
//             const currentDateStr = '2023-03-01T00:00:00+0900'
//             const testCase: {
//                 description: string
//                 userFeedData: { [key: string]: any }[]
//                 visitingCycleFeedData: VisitingCycleModel[]
//                 campaignFeedData: CampaignModel[]
//                 autoPushFeedData: AutoPushModel[]
//                 couponFeedData: CouponModel[]
//                 forInitialApproach: boolean
//                 currentDate: Date
//                 defaultCampaignCodes: string[]
//                 result: {
//                     createdCampaignCount: number
//                 }
//             }[] = [
//                     {
//                         description: '来店周期29 / 1回目の再来店券の期限が切れていない場合、2枚目は配布されない',
//                         userFeedData: userFeedData1,
//                         visitingCycleFeedData: visitingCycleFeedData3,
//                         campaignFeedData: campaignFeedData2,
//                         autoPushFeedData: autoPushFeedData12,
//                         couponFeedData: couponFeedData11,
//                         forInitialApproach: false,
//                         currentDate: moment(currentDateStr).toDate(),
//                         defaultCampaignCodes: ['500001', '500002', '500003'],
//                         result: {
//                             createdCampaignCount: 3,
//                         },
//                     },
//                 ]
//             for (const c of testCase) {
//                 await Promise.all(
//                     c.userFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.users)
//                             .doc(feedData.uid)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.visitingCycleFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.visitingCycles)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.campaignFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.campaigns)
//                             .add(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.autoPushFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.autoPush)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//                 await Promise.all(
//                     c.couponFeedData.map(async (feedData) => {
//                         return store
//                             .collection(firestoreCollectionName.coupons)
//                             .doc(feedData.key)
//                             .set(feedData)
//                             .catch((err) => {
//                                 throw err
//                             })
//                     })
//                 )
//
//                 const results = await campaignUsecase.sendVisitingCycleCampaign(c.forInitialApproach, c.currentDate).catch((err) => {
//                     throw err
//                 })
//                 expect(results.length).toBe(c.result.createdCampaignCount)
//
//                 const campaignSnapshot = await store
//                     .collection(firestoreCollectionName.campaigns)
//                     .where('campaignCode', 'not-in', c.defaultCampaignCodes)
//                     .get()
//                     .catch((err) => {
//                         throw err
//                     })
//                 expect(campaignSnapshot.docs.length).toBe(c.result.createdCampaignCount)
//                 campaignSnapshot.docs.sort((a, b) => {
//                     if (a.data().notifiedAt.toDate().getTime() < b.data().notifiedAt.toDate().getTime()) {
//                         return 1
//                     } else {
//                         return -1
//                     }
//                 })
//                 for (let i = 0; i <= c.result.createdCampaignCount - 1; i++) {
//                     if (i === c.result.createdCampaignCount - 1) {
//                         break
//                     }
//                     const a = moment(campaignSnapshot.docs[i].data().notifiedAt.toDate())
//                     const b = moment(campaignSnapshot.docs[i + 1].data().notifiedAt.toDate())
//                     expect(moment(a).diff(b, 'seconds')).toBe(90)
//                 }
//
//                 await flushFirestore().catch((err) => {
//                     throw err
//                 })
//                 await flushDB().catch((err) => {
//                     throw err
//                 })
//             }
//         })
//     })
// })

const campaignFeedData1: CampaignModel[] = [
  {
    id: "C8NRK8iRVmuybuVqqwp4",
    campaignCode: "500001",
    notifiedAt: moment()
      .tz("Asia/Tokyo")
      .add(1, "month")
      .add(-1, "second")
      .tz("Asia/Tokyo")
      .toDate(),
    status: 0,
    title: "全ユーザー配信キャンペーン",
    summary: "お知らせサマリー1です",
    shopCode: null,
    description: "これはお知らせのテスト1です。すべてパスしたら幸せです",
    notes: "これはテストの備考1です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/mc-app-marugen.appspot.com/o/campaign1.png",
    movieURL: null,
    hasCoupon: false,
    couponDocIDs: null,
    campaignStart: null,
    campaignEnd: null,
    notificationCategoryCode: null,
    birth: null,
    birthdayFrom: null,
    birthdayTo: null,
    couponExpiredAt: null,
    couponPublishAt: null,
    expiredAt: null,
    familyAge: null,
    familyBirth: null,
    gender: null,
    lowerStamp: null,
    upperStamp: null,
    numberToSend: null,
    post: null,
    userIds: null,
    publishAt: null,
    targetShopCode: null,
    autoPushCampaignCode: null,
    visitorPromotionTargetType: null,
    topicType: null,
    uidBulkUploadKey: null,
    exchangedStampRate: null,
    screenTransitionCode: null,
    transitionTargetShopCode: null,
    meta: null,
  },
  {
    id: "a7b5Xw6DmnXtUY3yXpND",
    campaignCode: "500002",
    notifiedAt: moment()
      .tz("Asia/Tokyo")
      .add(-1, "hour")
      .add(10, "minute")
      .tz("Asia/Tokyo")
      .toDate(),
    status: 0,
    title: "個別店舗配信キャンペーン",
    summary: "お知らせサマリー2です",
    shopCode: null,
    description: "これはお知らせのテスト2です。すべてパスしたら幸せです",
    notes: "これはテストの備考2です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/mc-app-marugen.appspot.com/o/campaign1.png",
    movieURL: null,
    hasCoupon: false,
    couponDocIDs: null,
    campaignStart: null,
    campaignEnd: null,
    notificationCategoryCode: null,
    birth: null,
    birthdayFrom: null,
    birthdayTo: null,
    couponExpiredAt: null,
    couponPublishAt: null,
    expiredAt: null,
    familyAge: null,
    familyBirth: null,
    gender: null,
    lowerStamp: null,
    upperStamp: null,
    numberToSend: 12,
    post: null,
    userIds: null,
    publishAt: null,
    targetShopCode: [
      {
        name: "逗子店",
        shopCode: "1001",
      },
    ],
    autoPushCampaignCode: null,
    visitorPromotionTargetType: null,
    topicType: null,
    uidBulkUploadKey: null,
    exchangedStampRate: null,
    screenTransitionCode: null,
    transitionTargetShopCode: null,
    meta: null,
  },
  {
    id: "zxzxk9nZPsA7xM5t2Hs5",
    campaignCode: "500003",
    notifiedAt: moment()
      .add(1, "month")
      .add(-1, "second")
      .tz("Asia/Tokyo")
      .toDate(),
    status: 0,
    title: "複数店舗配信キャンペーン",
    summary: "お知らせサマリー2です",
    shopCode: null,
    description: "これはお知らせのテスト2です。すべてパスしたら幸せです",
    notes: "これはテストの備考2です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/mc-app-marugen.appspot.com/o/campaign1.png",
    movieURL: null,
    hasCoupon: false,
    couponDocIDs: null,
    campaignStart: null,
    campaignEnd: null,
    notificationCategoryCode: null,
    birth: null,
    birthdayFrom: null,
    birthdayTo: null,
    couponExpiredAt: null,
    couponPublishAt: null,
    expiredAt: null,
    familyAge: null,
    familyBirth: null,
    gender: null,
    lowerStamp: null,
    upperStamp: null,
    numberToSend: null,
    post: null,
    userIds: null,
    publishAt: null,
    targetShopCode: [
      {
        name: "逗子店",
        shopCode: "1001",
      },
      {
        name: "鎌倉店",
        shopCode: "1002",
      },
    ],
    autoPushCampaignCode: null,
    visitorPromotionTargetType: null,
    topicType: null,
    uidBulkUploadKey: null,
    exchangedStampRate: null,
    screenTransitionCode: null,
    transitionTargetShopCode: null,
    meta: null,
  },
];

const campaignFeedData2: CampaignModel[] = [
  {
    id: "FKhnPCaP5WCiGG9mpUTw",
    campaignCode: "500001",
    notifiedAt: moment()
      .tz("Asia/Tokyo")
      .add(1, "month")
      .add(-1, "second")
      .tz("Asia/Tokyo")
      .toDate(),
    status: 0,
    title: "全ユーザー配信キャンペーン",
    summary: "お知らせサマリー1です",
    shopCode: null,
    description: "これはお知らせのテスト1です。すべてパスしたら幸せです",
    notes: "これはテストの備考1です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/mc-app-marugen.appspot.com/o/campaign1.png",
    movieURL: null,
    hasCoupon: false,
    couponDocIDs: null,
    campaignStart: moment("2023-03-01T00:00:00+0900")
      .startOf("day")
      .add(-1, "day")
      .add(10, "hours")
      .add(0, "minutes")
      .toDate(),
    campaignEnd: moment("2023-03-01T00:00:00+0900")
      .endOf("day")
      .add(-1, "day")
      .toDate(),
    notificationCategoryCode: null,
    birth: null,
    birthdayFrom: null,
    birthdayTo: null,
    couponExpiredAt: null,
    couponPublishAt: null,
    expiredAt: null,
    familyAge: null,
    familyBirth: null,
    gender: null,
    lowerStamp: null,
    upperStamp: null,
    numberToSend: null,
    post: null,
    userIds: null,
    publishAt: null,
    targetShopCode: null,
    autoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
    visitorPromotionTargetType: null,
    topicType: null,
    uidBulkUploadKey: null,
    exchangedStampRate: null,
    screenTransitionCode: null,
    transitionTargetShopCode: null,
    meta: null,
  },
  {
    id: "wSPKG2G933T3eJRzABdC",
    campaignCode: "500002",
    notifiedAt: moment()
      .tz("Asia/Tokyo")
      .add(-1, "hour")
      .add(10, "minute")
      .tz("Asia/Tokyo")
      .toDate(),
    status: 0,
    title: "個別店舗配信キャンペーン",
    summary: "お知らせサマリー2です",
    shopCode: null,
    description: "これはお知らせのテスト2です。すべてパスしたら幸せです",
    notes: "これはテストの備考2です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/mc-app-marugen.appspot.com/o/campaign1.png",
    movieURL: null,
    hasCoupon: false,
    couponDocIDs: null,
    campaignStart: moment("2023-03-01T00:00:00+0900")
      .startOf("day")
      .add(-1, "day")
      .add(10, "hours")
      .add(0, "minutes")
      .toDate(),
    campaignEnd: moment("2023-03-01T00:00:00+0900")
      .endOf("day")
      .add(-1, "day")
      .toDate(),
    notificationCategoryCode: null,
    birth: null,
    birthdayFrom: null,
    birthdayTo: null,
    couponExpiredAt: null,
    couponPublishAt: null,
    expiredAt: null,
    familyAge: null,
    familyBirth: null,
    gender: null,
    lowerStamp: null,
    upperStamp: null,
    numberToSend: 12,
    post: null,
    userIds: null,
    publishAt: null,
    targetShopCode: [
      {
        name: "逗子店",
        shopCode: "1001",
      },
    ],
    autoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
    visitorPromotionTargetType: null,
    topicType: null,
    uidBulkUploadKey: null,
    exchangedStampRate: null,
    screenTransitionCode: null,
    transitionTargetShopCode: null,
    meta: null,
  },
  {
    id: "zxzxk9nZPsA7xM5t2Hs5",
    campaignCode: "500003",
    notifiedAt: moment()
      .tz("Asia/Tokyo")
      .add(-1, "hour")
      .add(10, "minute")
      .tz("Asia/Tokyo")
      .toDate(),
    status: 0,
    title: "個別店舗配信キャンペーン",
    summary: "お知らせサマリー2です",
    shopCode: null,
    description: "これはお知らせのテスト2です。すべてパスしたら幸せです",
    notes: "これはテストの備考2です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/mc-app-marugen.appspot.com/o/campaign1.png",
    movieURL: null,
    hasCoupon: false,
    couponDocIDs: null,
    campaignStart: moment("2023-03-01T00:00:00+0900")
      .startOf("day")
      .add(-1, "day")
      .add(10, "hours")
      .add(0, "minutes")
      .toDate(),
    campaignEnd: moment("2023-03-01T00:00:00+0900")
      .endOf("day")
      .add(-1, "day")
      .toDate(),
    notificationCategoryCode: null,
    birth: null,
    birthdayFrom: null,
    birthdayTo: null,
    couponExpiredAt: null,
    couponPublishAt: null,
    expiredAt: null,
    familyAge: null,
    familyBirth: null,
    gender: null,
    lowerStamp: null,
    upperStamp: null,
    numberToSend: 12,
    post: null,
    userIds: null,
    publishAt: null,
    targetShopCode: [
      {
        name: "逗子店",
        shopCode: "1001",
      },
    ],
    autoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
    visitorPromotionTargetType: null,
    topicType: null,
    uidBulkUploadKey: null,
    exchangedStampRate: null,
    screenTransitionCode: null,
    transitionTargetShopCode: null,
    meta: null,
  },
];

const topicFeedData1: TopicModel[] = [
  {
    key: "",
    name: `${process.env.BRAND_CODE}_brand_all`,
    subscriberCount: 20,
    userCount: 15,
    shopId: null,
    createdAt: moment("2000-03-09T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    updatedAt: moment("2000-03-09T00:00:00+0900").tz("Asia/Tokyo").toDate(),
  },
  {
    key: "",
    name: `${process.env.BRAND_CODE}_shop_1001`,
    subscriberCount: 10,
    userCount: 8,
    shopId: 1001,
    createdAt: moment("2000-03-09T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    updatedAt: moment("2000-03-09T00:00:00+0900").tz("Asia/Tokyo").toDate(),
  },
  {
    key: "",
    name: `${process.env.BRAND_CODE}_shop_1002`,
    subscriberCount: 11,
    userCount: 10,
    shopId: 1002,
    createdAt: moment("2000-03-09T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    updatedAt: moment("2000-03-09T00:00:00+0900").tz("Asia/Tokyo").toDate(),
  },
];

const userFeedData1: UserModel[] = [
  {
    id: 1001,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("1989-01-13T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-91, "days").toDate(),
    updatedAt: moment().add(-91, "days").toDate(),
  },
  {
    id: 1002,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("1977-05-18T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-151, "days").toDate(),
    updatedAt: moment().add(-151, "days").toDate(),
  },
  {
    id: 1003,
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
];

const userFeedData2: UserModel[] = [
  {
    id: 1001,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("1989-01-13T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-271, "days").toDate(),
    updatedAt: moment().add(-271, "days").toDate(),
  },
  {
    id: 1002,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("1977-05-18T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-331, "days").toDate(),
    updatedAt: moment().add(-331, "days").toDate(),
  },
  {
    id: 1003,
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-361, "days").toDate(),
    updatedAt: moment().add(-361, "days").toDate(),
  },
];

const userFeedData3: UserModel[] = [
  {
    id: 1001,
    uid: "aWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("1989-01-13T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-91, "days").toDate(),
    updatedAt: moment().add(-91, "days").toDate(),
  },
  {
    id: 1002,
    uid: "bWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("1977-05-18T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-151, "days").toDate(),
    updatedAt: moment().add(-151, "days").toDate(),
  },
  {
    id: 1003,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
  {
    id: 1004,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
  {
    id: 1005,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
  {
    id: 1006,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
  {
    id: 1007,
    uid: "gWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
  {
    id: 1008,
    uid: "hWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
  {
    id: 1009,
    uid: "iWSvISHeZYY2I0PgAlewd8UoSb63",
    name: null,
    nickname: null,
    givenNameKana: null,
    familyNameKana: null,
    kana: null,
    gender: null,
    birth: moment("2000-02-03T00:00:00+0900").tz("Asia/Tokyo").toDate(),
    postNumber: null,
    mail: null,
    phone: null,
    lineUserID: null,
    appleUserID: null,
    emailVerifiedAt: null,
    createdAt: moment().add(-211, "days").toDate(),
    updatedAt: moment().add(-211, "days").toDate(),
  },
];

const topicUserFeedData1: TopicUserModel[] = [
  {
    key: "",
    // uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42', 'IWSvISHeZYY2I0PgAlewd8UoSb63', 'ZWSvISHeZYY2I0PgAlewd8UoSb63'],
    numOfUsers: 3,
    updatedAt: moment("2021-01-14T12:00:00+0900").tz("Asia/Tokyo").toDate(),
  },
];

const topicUserFeedData2: TopicUserModel[] = [
  {
    key: "",
    // uids: ['cvN5qBgRzaN7U6aPD3kk19LAGK42'],
    numOfUsers: 1,
    updatedAt: moment("2021-01-14T12:00:00+0900").tz("Asia/Tokyo").toDate(),
  },
];

const autoPushFeedData1: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.birthdayMonthCampaign,
    title: "おこほんから誕生日プレゼント！",
    summary: "サマリーです",
    description:
      "いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。",
    notes: "備考です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData2: AutoPushModel[] = [
  {
    key: "50001005",
    title: "ご来店ありがとうございました！",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData3: AutoPushModel[] = [
  {
    key: "50001006",
    title: "ご優待クーポンプレゼント",
    summary: "ご優待クーポンプレゼント",
    description:
      "お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData4: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.mySpecialPersonAllBirthdayMonthCampaign,
    title: "大切な人の誕生日にクーポンはいかが？",
    summary: "サマリーです",
    description:
      "いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。",
    notes: "備考です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData5: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.stampExchangeRemind,
    title: "クーポンに交換できるようになりました",
    summary:
      "スタンプが貯まったのでクーポンに交換できるようになりました。スタンプ/クーポン画面からクーポンに交換してご利用いただけます。",
    description: null,
    notes: null,
    image: null,
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData6: AutoPushModel[] = [
  {
    key: "50001010",
    title: "来店回数UP",
    summary: "クーポンプレゼント",
    description:
      "お好み焼本舗から本メッセージをお受け取りになったお客様限定で【ご優待クーポン】をご用意いたしました。\n\nこの機会に是非とも、お好み焼本舗でお食事をお楽しみくださいませ！\n\nお客様のお越しを心よりお待ちしております！",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData7: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.stampExpirationReminder,
    title: "有効期限切れが近づいているスタンプがございます",
    summary: "サマリーです",
    description:
      "お客様がお持ちのスタンプで、有効期限切れが近づいているスタンプがございます。",
    notes: "備考です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];
const autoPushFeedData8: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.couponExpirationReminder,
    title: "有効期限切れが近づいているクーポンがございます",
    summary: "サマリーです",
    description:
      "お客様がお持ちのクーポンで、有効期限切れが近づいているクーポンがございます。",
    notes: "備考です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData9: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.oneMoreBirthdayMonthCoupon,
    title: "誕生日プレゼント！",
    summary: "サマリーです",
    description:
      "いつもお好み焼本舗をご利用いただき、\n誠にありがとうございます。",
    notes: "備考です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData10: AutoPushModel[] = [
  {
    key: "50001017",
    title: "ご来店ありがとうございました！",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData11: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.repeatableCouponCampaign,
    title: "{{coupon.name}}をお送りいたします",
    summary: "{{coupon.name}}をお送りいたします。やったね！",
    description:
      "平素より{{brand.name}}をご利用いただき誠にありがとうございます。\n先日は{{coupon.name}}をご利用頂きありがとうございます。\n新しくお使いいただける{{coupon.name}}をお送り致しますので、ぜひご利用ください。",
    notes: "{{coupon.description}}",
    image: null,
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const autoPushFeedData12: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
    title: "再来店券配布1",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["1"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
    title: "再来店券配布2",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["2"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
    title: "再来店券配布3",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["3"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion04Campaign,
    title: "再来店券配布4",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["4"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion05Campaign,
    title: "再来店券配布5",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["5"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion06Campaign,
    title: "再来店券配布6",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["6"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion07Campaign,
    title: "再来店券配布7",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["7"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion08Campaign,
    title: "再来店券配布8",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["8"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion09Campaign,
    title: "再来店券配布9",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["9"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion10Campaign,
    title: "再来店券配布10",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["10"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRepeaterPromotion11Campaign,
    title: "再来店券配布11",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["11"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleRemindPromotion01Campaign,
    title: "リマインド1",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["12"],
    autoCoupon: true,
  },
  {
    key: AutoPushCampaignCode.visitingCycleReactivatePromotion01Campaign,
    title: "休眠抑制1",
    summary: "ご来店感謝特別クーポンプレゼント！",
    description:
      "先日は数ある飲食店の中から、お好み焼本舗へお越しいただきまして誠にありがとうございます。\n\nご来店に感謝を込めまして、ささやかながら次回ご利用いただける【特別クーポン】をご用意いたしました。\n\nまたのお越しを心よりお待ちしております。",
    notes:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: ["13"],
    autoCoupon: true,
  },
];

const autoPushFeedData13: AutoPushModel[] = [
  {
    key: AutoPushCampaignCode.ykpdItemExchangeExpirationReminder,
    title: "有効期限切れが近づいているアイテムがございます",
    summary: "サマリーです",
    description:
      "お客様がお持ちのスタンプで、有効期限切れが近づいているスタンプがございます。{{gift.list}}",
    notes: "備考です",
    image:
      "https://firebasestorage.googleapis.com/v0/b/bcs-mng-api-okohon-dev.appspot.com/1",
    couponDocIDs: null,
    autoCoupon: true,
  },
];

const couponFeedData1: CouponModel[] = [
  {
    key: "YV6nCaMwTUELW232ev6A",
    id: CouponID.thanksForComming,
    name: "ご来店感謝特別クーポン",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 90,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData2: CouponModel[] = [
  {
    key: "YV6nCaMwTUELW232ev6A",
    id: 2,
    name: "ご来店感謝特別クーポン",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 90,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "GQbrJGUP6fteBcIk1v9U",
    id: 2,
    name: "ご優待クーポンプレゼント",
    metaName: "管理名1",
    caution: "ご優待クーポンプレゼント",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 30,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData3: CouponModel[] = [
  {
    key: "YV6nCaMwTUELW232ev6A",
    id: 1000,
    name: "誕生日おめでと���ございます",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "クーポンの説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData4: CouponModel[] = [
  {
    key: "aV6nCaMwTUELW232ev6A",
    id: 1,
    name: "ランチスタンプと交換できるクーポン1",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "スタンプと交換できるクーポン1の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 5,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "bV6nCaMwTUELW232ev6A",
    id: 2,
    name: "ランチスタンプと交換できるクーポン2",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "スタンプと交換できるクーポン2の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 10,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "cV6nCaMwTUELW232ev6A",
    id: 3,
    name: "ディナースタンプと交換できるクーポン1",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 1,
    caution: "",
    description: "ディナースタンプと交換できるクーポン1の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 5,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "dV6nCaMwTUELW232ev6A",
    id: 4,
    name: "ディナースタンプと交換できるクーポン2",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 1,
    caution: "",
    description: "ディナースタンプと交換できるクーポン2の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 10,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData5: CouponModel[] = [
  {
    key: "lfuvCqIJECYWSdkvOSz4",
    id: 2,
    name: "ランチスタンプと交換できるクーポン1",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "スタンプと交換できるクーポン1の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 5,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "tjQQaBXA2EkcZooyM6dk",
    id: 3,
    name: "ランチスタンプと交換できるクーポン2",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "スタンプと交換できるクーポン2の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 10,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "kDQb6nKpmWE9MPZqqVOB",
    id: 2,
    name: "ディナースタンプと交換できるクーポン1",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 1,
    caution: "",
    description: "ディナースタンプと交換できるクーポン1の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 5,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "oIMLNuQHAPm6TrDw82dW",
    id: 2,
    name: "ディナースタンプと交換できるクーポン2",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 1,
    caution: "",
    description: "ディナースタンプと交換できるクーポン2の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 3,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "k4erb9yDWPprNq1IzRTh",
    id: 2,
    name: "ディナースタンプと交換できるクーポン3",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 1,
    caution: "",
    description: "ディナースタンプと交換できるクーポン3の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 10,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData6: CouponModel[] = [
  {
    key: "bPjH1mNR2rvdrhRZ8oNa",
    id: 2,
    name: "15%引き",
    metaName: "管理名1",
    caution: "visitorPromotion3",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 90,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "cCrJq7kbS1NtztVRm8TS",
    id: 2,
    name: "10%引き",
    metaName: "管理名1",
    caution: "visitorPromotion4",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 30,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData7: CouponModel[] = [
  {
    key: "",
    id: CouponID.campaign,
    name: "誕生日おめでとうございます",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "クーポンの説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData8: CouponModel[] = [
  {
    key: "YV6nCaMwTUELW232ev6A",
    id: CouponID.thanksForComming,
    name: "ご来店感謝特別クーポン",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: moment().add(1, "month").tz("Asia/Tokyo").toDate(),
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 90,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData9: CouponModel[] = [
  {
    key: "ZV6nCaMwTUELW232ev6A",
    id: CouponID.repeatable,
    name: "餃子無料パスポート",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "毎日一日１枚の利用となります",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: true,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "bPjH1mNR2rvdrhRZ8oNa",
    id: CouponID.repeatable,
    name: "ラーメン無料パスポート",
    metaName: "管理名1",
    caution: "",
    barcode: "007410000020",
    category: 0,
    description: "●税込会計総額より15％割引いたします",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 90,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "cCrJq7kbS1NtztVRm8TS",
    id: CouponID.birthday,
    name: "誕生日おめでとうございます",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "クーポンの説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

// 無料パスポート期限あり
const couponFeedData10: CouponModel[] = [
  {
    key: "ZV6nCaMwTUELW232ev6A",
    id: CouponID.repeatable,
    name: "餃子無料パスポート",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "毎日一日１枚の利用となります",
    expiredAt: moment().add(1, "week").toDate(),
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: true,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData11: CouponModel[] = [
  {
    key: "1",
    id: CouponID.campaign,
    name: "再来店券1",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "2",
    id: CouponID.campaign,
    name: "再来店券2",
    metaName: "管理名2",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "3",
    id: CouponID.campaign,
    name: "再来店券3",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "4",
    id: CouponID.campaign,
    name: "再来店券4",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "5",
    id: CouponID.campaign,
    name: "再来店券5",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "6",
    id: CouponID.campaign,
    name: "再来店券6",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "7",
    id: CouponID.campaign,
    name: "再来店券7",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "8",
    id: CouponID.campaign,
    name: "再来店券8",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "9",
    id: CouponID.campaign,
    name: "再来店券9",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "10",
    id: CouponID.campaign,
    name: "再来店券10",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "11",
    id: CouponID.campaign,
    name: "再来店券11",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 14,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "12",
    id: CouponID.campaign,
    name: "リマインドクーポン1",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 28,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
  {
    key: "13",
    id: CouponID.campaign,
    name: "休眠抑制クーポン1",
    metaName: "管理名1",
    caution: "ご来店感謝特別クーポンプレゼント！",
    barcode: "007410000019",
    category: 0,
    description:
      "●税込会計総額より15％割引いたします\n●本券は1グループ1枚までのご利用とさせていただきます\n●他の割引券・特典との併用はできません\n●本特典は宴会コース・学生宴会コースではご利用できません",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment().add(-1, "day").tz("Asia/Tokyo").toDate(),
    stampRate: 0,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const couponFeedData12: CouponModel[] = [
  {
    key: "bV6nCaMwTUELW232ev6A",
    id: 2,
    name: "ランチスタンプと交換できるクーポン1",
    metaName: "管理名1",
    barcode: "007410000019",
    category: 0,
    caution: "",
    description: "スタンプと交換できるクーポン2の説明です",
    expiredAt: null,
    image: "https://firebasestorage.googleapis.com/coupon/1",
    publishAt: moment("2021-01-13T12:00:00+0900").tz("Asia/Tokyo").toDate(),
    stampRate: 10,
    status: "1",
    useLimit: null,
    useTerm: 60,
    repeatable: false,
    couponCampaignType: CouponCampaignType.none,
    forAdmin: false,
  },
];

const dailyVisitorFeedData1: DailyVisitorModel[] = [
  {
    key: "",
    uids: ["cvN5qBgRzaN7U6aPD3kk19LAGK42", "IWSvISHeZYY2I0PgAlewd8UoSb63"],
    visitedDateYYYYMMDD: moment()
      .tz("Asia/Tokyo")
      .add(-1, "day")
      .format("YYYYMMDD"),
    createdAt: moment().add(-1, "day").toDate(),
    updatedAt: moment().add(-1, "day").toDate(),
  },
  {
    key: "",
    uids: ["cvN5qBgRzaN7U6aPD3kk19LAGK42"],
    visitedDateYYYYMMDD: moment()
      .tz("Asia/Tokyo")
      .add(-2, "day")
      .format("YYYYMMDD"),
    createdAt: moment().add(-2, "day").toDate(),
    updatedAt: moment().add(-2, "day").toDate(),
  },
];
const dailyVisitorFeedData2: DailyVisitorModel[] = [
  {
    key: "",
    uids: ["IWSvISHeZYY2I0PgAlewd8UoSb63"],
    visitedDateYYYYMMDD: moment()
      .tz("Asia/Tokyo")
      .add(-2, "day")
      .format("YYYYMMDD"),
    createdAt: moment().add(-2, "day").toDate(),
    updatedAt: moment().add(-2, "day").toDate(),
  },
];

const userVisitedShopsFeedData1: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-2, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10002,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-2, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10003,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-3, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10004,
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-3, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
];
const userVisitedShopsFeedData2: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-2, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10002,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-3, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10003,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-4, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10004,
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-3, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
];

const userVisitedShopsFeedData3: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-91, "days")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10002,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-151, "days")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10003,
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-211, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
];

const userVisitedShopsFeedData4: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-271, "days")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10002,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-331, "days")
      .tz("Asia/Tokyo")
      .toDate(),
  },
  {
    key: "",
    id: 10003,
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-361, "day")
      .tz("Asia/Tokyo")
      .toDate(),
  },
];

const userVisitedShopsFeedData5: { [key: string]: any }[] = [
  {
    key: "",
    id: 10003,
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(-1, "year")
      .tz("Asia/Tokyo")
      .toDate(),
  },
];

const userVisitedShopsFeedData6: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "aWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "bWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(8 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
];

const userVisitedShopsFeedData7: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "aWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "aWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "bWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "bWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "bWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
];

const userVisitedShopsFeedData8: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(7 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
];

const userVisitedShopsFeedData9: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "cWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(6 * 30 * -1, "days")
      .add(-5, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-5, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "dWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-6, "day")
      .toDate(),
  },
];

const userVisitedShopsFeedData10: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-5, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-6, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "eWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(5 * 30 * -1, "days")
      .add(-7, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-5, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-6, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-7, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-8, "day")
      .toDate(),
  },
];

const userVisitedShopsFeedData11: { [key: string]: any }[] = [
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-1, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-2, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-3, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-4, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-5, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-6, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-7, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-8, "day")
      .toDate(),
  },
  {
    key: "",
    id: 10001,
    uid: "fWSvISHeZYY2I0PgAlewd8UoSb63",
    shopId: 1001,
    visitedAt: moment()
      .tz("Asia/Tokyo")
      .add(4 * 30 * -1, "days")
      .add(-9, "day")
      .toDate(),
  },
];

const stampFeedData1: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402602,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402604,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402605,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData2: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402602,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402604,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402605,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402606,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402607,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402608,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402609,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402610,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData3: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402602,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402604,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402605,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData4: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402602,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402604,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402605,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402606,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402607,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402608,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402609,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402610,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData5: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402602,
    shopId: 6038,
    category: 1,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData6: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData7: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402602,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402604,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402605,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402606,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402607,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402608,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402609,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402610,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402611,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402612,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402613,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402614,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
  {
    key: "",
    id: 19487108402615,
    shopId: 6038,
    category: 0,
    timestamp: moment().tz("Asia/Tokyo").add(-1, "week").toDate(),
    usedDate: null,
    expiredDate: null,
    expired: false,
  },
];

const stampFeedData8: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 0,
    timestamp: moment("2021-04-01T00:00:00+0900").toDate(),
    usedDate: null,
    expiredDate: moment("2022-04-01T00:00:00+0900").toDate(),
    expired: false,
  },
  {
    key: "",
    id: 19487108402601,
    shopId: 6038,
    category: 0,
    timestamp: moment("2021-04-30T00:00:00+0900").toDate(),
    usedDate: null,
    expiredDate: moment("2022-04-30T00:00:00+0900").toDate(),
    expired: false,
  },
];

const stampFeedData9: UserStampModel[] = [
  {
    key: "",
    id: 19487108402600,
    shopId: 6038,
    category: 0,
    timestamp: moment("2021-03-01T00:00:00+0900").toDate(),
    usedDate: null,
    expiredDate: moment("2022-03-01T00:00:00+0900").toDate(),
    expired: false,
  },
];

const stampExchangeRemindLogFeedData1: StampExchangeRemindLogModel[] = [
  {
    key: "1",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    stampRate: 5,
    stampCategory: 0,
    remindedAt: moment("2021-06-22T10:00:00+0900").toDate(),
    createdAt: moment("2021-06-22T10:00:00+0900").toDate(),
    updatedAt: moment("2021-06-22T10:00:00+0900").toDate(),
  },
  {
    key: "2",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    stampRate: 3,
    stampCategory: 0,
    remindedAt: moment("2021-06-22T10:00:00+0900").toDate(),
    createdAt: moment("2021-06-22T10:00:00+0900").toDate(),
    updatedAt: moment("2021-06-22T10:00:00+0900").toDate(),
  },
  {
    key: "3",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    stampRate: 5,
    stampCategory: 1,
    remindedAt: moment("2021-06-22T10:00:00+0900").toDate(),
    createdAt: moment("2021-06-22T10:00:00+0900").toDate(),
    updatedAt: moment("2021-06-22T10:00:00+0900").toDate(),
  },
  {
    key: "4",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    stampRate: 3,
    stampCategory: 1,
    remindedAt: moment("2021-06-22T10:00:00+0900").toDate(),
    createdAt: moment("2021-06-22T10:00:00+0900").toDate(),
    updatedAt: moment("2021-06-22T10:00:00+0900").toDate(),
  },
];

const stampExchangeRemindLogFeedData2: StampExchangeRemindLogModel[] = [
  {
    key: "3",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    stampRate: 5,
    stampCategory: 1,
    remindedAt: moment("2021-06-22T10:00:00+0900").toDate(),
    createdAt: moment("2021-06-22T10:00:00+0900").toDate(),
    updatedAt: moment("2021-06-22T10:00:00+0900").toDate(),
  },
  {
    key: "4",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    stampRate: 3,
    stampCategory: 1,
    remindedAt: moment("2021-06-22T10:00:00+0900").toDate(),
    createdAt: moment("2021-06-22T10:00:00+0900").toDate(),
    updatedAt: moment("2021-06-22T10:00:00+0900").toDate(),
  },
];

const userCouponsFeedData1 = [
  {
    key: "",
    code: 1,
    coupon: null,
    expiredAt: moment().add(2, "weeks").toDate(),
    getAt: moment().add(-1, "month").toDate(),
    notificationId: null,
    shopCode: 6000,
    usedAt: null,
  },
  {
    key: "",
    code: 2,
    coupon: null,
    expiredAt: moment().add(2, "weeks").toDate(),
    getAt: moment().add(-1, "month").toDate(),
    notificationId: null,
    shopCode: 6001,
    usedAt: null,
  },
  {
    key: "",
    code: 3,
    coupon: null,
    expiredAt: moment().add(2, "weeks").toDate(),
    getAt: moment().add(-1, "month").toDate(),
    notificationId: null,
    shopCode: 6001,
    usedAt: moment().add(-1, "day").toDate(),
  },
];

const userCouponsFeedData2 = [
  {
    key: "",
    code: 1,
    coupon: null,
    expiredAt: moment().add(2, "weeks").add(-1, "day").toDate(),
    getAt: moment().add(-1, "month").toDate(),
    notificationId: null,
    shopCode: 6000,
    usedAt: null,
  },
  {
    key: "",
    code: 3,
    coupon: null,
    expiredAt: moment().add(2, "weeks").add(1, "day").toDate(),
    getAt: moment().add(-1, "month").toDate(),
    notificationId: null,
    shopCode: 6001,
    usedAt: null,
  },
];

// const userFamilyFeedData1: UserFamilyModel[] = [
//     {
//         key: '',
//         name: 'たろう',
//         gender: '男性',
//         relation: 'その他',
//         birthDay: moment('2020-01-01T00:00:00+0900').toDate(),
//         birthMonth: 1,
//         birthYear: 2020,
//         age: 1,
//         ageRange: 0,
//         registeredDay: moment('2021-02-01T10:00:00+0900').toDate(),
//     },
//     {
//         key: '',
//         name: '誠',
//         gender: '男性',
//         relation: '兄',
//         birthDay: moment('1980-02-01T00:00:00+0900').toDate(),
//         birthMonth: 2,
//         birthYear: 1980,
//         age: 40,
//         ageRange: 40,
//         registeredDay: moment('2021-04-01T10:00:00+0900').toDate(),
//     },
//     {
//         key: '',
//         name: 'ぬこ吉',
//         gender: 'その他',
//         relation: 'その他',
//         birthDay: null,
//         birthMonth: null,
//         birthYear: null,
//         age: null,
//         ageRange: null,
//         registeredDay: moment('2021-03-01T10:00:00+0900').toDate(),
//     },
// ]

const birthdayCampaignMissedUserFeedData1: BirthdayCampaignMissedUserModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 1,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
];

const birthdayCampaignMissedUserFeedData2: BirthdayCampaignMissedUserModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 1,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "dvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T23:59:59+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 2,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "evN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.march,
    birthdayQuarter: 1,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "fvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.march,
    birthdayQuarter: 2,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
];

const birthdayCampaignMissedUserFeedData3: BirthdayCampaignMissedUserModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 1,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "dvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T23:59:59+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 1,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "evN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 2,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "fvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 2,
    deliveredCampaignCode: null,
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
];

const birthdayCampaignMissedUserFeedData4: BirthdayCampaignMissedUserModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 1,
    deliveredCampaignCode: "1",
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "dvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T23:59:59+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 1,
    deliveredCampaignCode: "2",
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "evN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 2,
    deliveredCampaignCode: "3",
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "fvN5qBgRzaN7U6aPD3kk19LAGK42",
    deliveryDate: moment("2022-04-22T00:00:00+0900").toDate(),
    monthCode: MonthCode.april,
    birthdayQuarter: 2,
    deliveredCampaignCode: "4",
    createdAt: moment("2022-04-21T00:00:00+0900").toDate(),
  },
];

const couponUsageLogFeedData1: CouponUsageLogModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    couponDocID: "",
    couponID: CouponID.birthday,
    campaignCode: "1000",
    autoPushCampaignCode: AutoPushCampaignCode.birthdayMonthCampaign,
    usedAt: moment("2022-07-22T10:00:00+0900").toDate(),
  },
];

const couponUsageLogFeedData2: CouponUsageLogModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    couponDocID: "",
    couponID: CouponID.birthday,
    campaignCode: "1000",
    autoPushCampaignCode: AutoPushCampaignCode.birthdayMonthCampaign,
    usedAt: moment("2022-07-21T00:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    couponDocID: "",
    couponID: CouponID.birthday,
    campaignCode: "1000",
    autoPushCampaignCode: AutoPushCampaignCode.birthdayMonthCampaign,
    usedAt: moment("2022-07-21T23:59:59+0900").toDate(),
  },
  {
    key: "",
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    couponDocID: "",
    couponID: CouponID.birthday,
    campaignCode: "1000",
    autoPushCampaignCode: AutoPushCampaignCode.birthdayMonthCampaign,
    usedAt: moment("2022-07-22T10:00:00+0900").toDate(),
  },
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    couponDocID: "",
    couponID: CouponID.campaign,
    campaignCode: "1001",
    autoPushCampaignCode: AutoPushCampaignCode.oneMoreBirthdayMonthCoupon,
    usedAt: moment("2022-07-22T11:00:00+0900").toDate(),
  },
];

const couponUsageLogFeedData3: CouponUsageLogModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    couponDocID: "ZV6nCaMwTUELW232ev6A",
    couponID: CouponID.repeatable,
    campaignCode: "1000",
    autoPushCampaignCode: AutoPushCampaignCode.repeatableCouponCampaign,
    usedAt: moment().add(-1, "day").toDate(),
  },
  {
    key: "",
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    couponDocID: "cCrJq7kbS1NtztVRm8TS",
    couponID: CouponID.birthday,
    campaignCode: "1001",
    autoPushCampaignCode: AutoPushCampaignCode.birthdayMonthCampaign,
    usedAt: moment().add(-1, "day").toDate(),
  },
  {
    key: "",
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    couponDocID: "bPjH1mNR2rvdrhRZ8oNa",
    couponID: CouponID.repeatable,
    campaignCode: "1002",
    autoPushCampaignCode: AutoPushCampaignCode.repeatableCouponCampaign,
    usedAt: moment().add(-1, "day").toDate(),
  },
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    couponDocID: "bPjH1mNR2rvdrhRZ8oNa",
    couponID: CouponID.repeatable,
    campaignCode: "1002",
    autoPushCampaignCode: AutoPushCampaignCode.repeatableCouponCampaign,
    usedAt: moment().add(-1, "day").toDate(),
  },
];

const couponUsageLogFeedData4: CouponUsageLogModel[] = [
  {
    key: "",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    couponDocID: "ZV6nCaMwTUELW232ev6A",
    couponID: CouponID.repeatable,
    campaignCode: "1000",
    autoPushCampaignCode: AutoPushCampaignCode.repeatableCouponCampaign,
    usedAt: moment().add(-1, "day").toDate(),
  },
];

const ykpdExchangableGiftRemindLogFeedData1: YKPDExchangableGiftRemindLogModel[] =
  [
    {
      key: "1",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      remindedAt: moment().toDate(),
      availableDateFrom: moment().startOf("day").toDate(),
      availableDateTo: moment().endOf("day").toDate(),
      createdAt: moment().toDate(),
    },
  ];

const visitingCycleFeedData1: VisitingCycleModel[] = [
  {
    key: "1",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    firstVisitedDate: moment("2023-01-01T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-01T12:00:00+0900").toDate(),
    visitedCount: 5,
    cycle: 10,
    lastVisitedShopID: 2502,
    approaching: true,
    lastDeliveredAutoPushCampaignCode: null,
    lastDeliveredCampaignCode: null,
    round: 1,
    createdAt: moment("2023-02-02T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-02T12:00:00+0900").toDate(),
  },
  {
    key: "2",
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    firstVisitedDate: moment("2023-01-02T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-02T12:00:00+0900").toDate(),
    visitedCount: 10,
    cycle: 50,
    lastVisitedShopID: 2501,
    approaching: true,
    lastDeliveredAutoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
    lastDeliveredCampaignCode: "2",
    round: 2,
    createdAt: moment("2023-02-03T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-03T12:00:00+0900").toDate(),
  },
  {
    key: "3",
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    firstVisitedDate: moment("2023-01-03T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-03T12:00:00+0900").toDate(),
    visitedCount: 1,
    cycle: 1,
    lastVisitedShopID: 2501,
    approaching: true,
    lastDeliveredAutoPushCampaignCode: null,
    lastDeliveredCampaignCode: null,
    round: 1,
    createdAt: moment("2023-02-04T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-04T12:00:00+0900").toDate(),
  },
];

const visitingCycleFeedData2: VisitingCycleModel[] = [
  {
    key: "1",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    firstVisitedDate: moment("2023-01-01T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-01T12:00:00+0900").toDate(),
    visitedCount: 5,
    cycle: 29,
    lastVisitedShopID: 2502,
    approaching: true,
    lastDeliveredAutoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
    lastDeliveredCampaignCode: "500001",
    round: 1,
    createdAt: moment("2023-02-02T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-02T12:00:00+0900").toDate(),
  },
];

const visitingCycleFeedData3: VisitingCycleModel[] = [
  {
    key: "1",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    firstVisitedDate: moment("2023-01-01T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-01T12:00:00+0900").toDate(),
    visitedCount: 5,
    cycle: 29,
    lastVisitedShopID: 2502,
    approaching: true,
    lastDeliveredAutoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion01Campaign,
    lastDeliveredCampaignCode: "500001",
    round: 1,
    createdAt: moment("2023-02-02T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-02T12:00:00+0900").toDate(),
  },
  {
    key: "2",
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    firstVisitedDate: moment("2023-01-02T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-02T12:00:00+0900").toDate(),
    visitedCount: 10,
    cycle: 49,
    lastVisitedShopID: 2501,
    approaching: true,
    lastDeliveredAutoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion02Campaign,
    lastDeliveredCampaignCode: "500002",
    round: 1,
    createdAt: moment("2023-02-03T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-03T12:00:00+0900").toDate(),
  },
  {
    key: "3",
    uid: "ZWSvISHeZYY2I0PgAlewd8UoSb63",
    firstVisitedDate: moment("2023-01-03T12:00:00+0900").toDate(),
    lastVisitedDate: moment("2023-02-03T12:00:00+0900").toDate(),
    visitedCount: 1,
    cycle: 57,
    lastVisitedShopID: 2501,
    approaching: true,
    lastDeliveredAutoPushCampaignCode:
      AutoPushCampaignCode.visitingCycleRepeaterPromotion03Campaign,
    lastDeliveredCampaignCode: "500003",
    round: 1,
    createdAt: moment("2023-02-04T12:00:00+0900").toDate(),
    updatedAt: moment("2023-02-04T12:00:00+0900").toDate(),
  },
];

const stampExchangeCouponDeliveredNotificationLogFeedData1: StampExchangeCouponDeliveredNotificationLogModel[] =
  [
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 5,
      stampCategory: 0,
      round: 1,
      couponDeliveredBannerShownAt: null,
      completedStampCardShownAt: null,
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
  ];

const stampExchangeCouponDeliveredNotificationLogFeedData2: StampExchangeCouponDeliveredNotificationLogModel[] =
  [
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 1,
      round: 1,
      couponDeliveredBannerShownAt: null,
      completedStampCardShownAt: null,
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
  ];

const stampExchangeCouponDeliveredNotificationLogFeedData3: StampExchangeCouponDeliveredNotificationLogModel[] =
  [
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 3,
      stampCategory: 1,
      round: 1,
      couponDeliveredBannerShownAt: null,
      completedStampCardShownAt: null,
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 1,
      round: 1,
      couponDeliveredBannerShownAt: null,
      completedStampCardShownAt: null,
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
  ];

const stampExchangeCouponDeliveredNotificationLogFeedData4: StampExchangeCouponDeliveredNotificationLogModel[] =
  [
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 0,
      round: 1,
      couponDeliveredBannerShownAt: moment().add(-3, "days").toDate(),
      completedStampCardShownAt: moment().add(-2, "days").toDate(),
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 0,
      round: 2,
      couponDeliveredBannerShownAt: moment().add(-2, "days").toDate(),
      completedStampCardShownAt: moment().add(-1, "days").toDate(),
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
  ];

const stampExchangeCouponDeliveredNotificationLogFeedData5: StampExchangeCouponDeliveredNotificationLogModel[] =
  [
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 0,
      round: 1,
      couponDeliveredBannerShownAt: moment().add(-3, "days").toDate(),
      completedStampCardShownAt: moment().add(-2, "days").toDate(),
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 0,
      round: 2,
      couponDeliveredBannerShownAt: moment().add(-2, "days").toDate(),
      completedStampCardShownAt: moment().add(-1, "days").toDate(),
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
    {
      key: "",
      uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
      stampRate: 10,
      stampCategory: 0,
      round: 2,
      couponDeliveredBannerShownAt: null,
      completedStampCardShownAt: null,
      createdAt: moment().tz("Asia/Tokyo").toDate(),
      updatedAt: moment().tz("Asia/Tokyo").toDate(),
    },
  ];

const stampAddedUserFeedData1: Omit<
  StampAddedUserModel,
  "key" | "createdAt" | "updatedAt"
>[] = [
    {
      uids: [
        "cvN5qBgRzaN7U6aPD3kk19LAGK42",
        "IWSvISHeZYY2I0PgAlewd8UoSb63",
        "ZWSvISHeZYY2I0PgAlewd8UoSb63",
      ],
      numOfUsers: 3,
      targetDate: moment("2023-04-28T00:00:00+0900").toDate(),
    },
    {
      uids: ["cvN5qBgRzaN7U6aPD3kk19LAGK42"],
      numOfUsers: 1,
      targetDate: moment("2023-04-29T00:00:00+0900").toDate(),
    },
  ];

const ykpdGiftRequestFeedData1: YKPDGiftRequestModel[] = [
  {
    key: "1pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: "00008",
    couponID: null,
    availableAt: moment("2021-08-11T00:00:00+0900").toDate(),
    exchangeDeadline: moment().add(2, "weeks").startOf("day").toDate(),
    round: 1,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "2pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: "00008",
    couponID: null,
    availableAt: moment("2021-08-11T00:00:00+0900").toDate(),
    exchangeDeadline: moment()
      .add(2, "weeks")
      .startOf("day")
      .add(1, "hour")
      .toDate(),
    round: 2,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "3pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: null,
    couponID: "5hVGViwReDesZwKYlD0E",
    availableAt: moment("2021-08-10T00:00:00+0900").toDate(),
    exchangeDeadline: moment().toDate(),
    round: 1,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "4pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: null,
    couponID: "5hVGViwReDesZwKYlD0E",
    availableAt: moment("2021-08-10T00:00:00+0900").toDate(),
    exchangeDeadline: moment().toDate(),
    round: 2,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "5pF9HWqaRAzd5qQbUTnG",
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    itemID: null,
    couponID: "5hVGViwReDesZwKYlD0E",
    availableAt: moment("2021-08-10T00:00:00+0900").toDate(),
    exchangeDeadline: moment().add(2, "weeks").endOf("day").toDate(),
    round: 2,
    isExchanged: false,
    exchangedAt: null,
  },
];
const ykpdGiftRequestFeedData2: YKPDGiftRequestModel[] = [
  {
    key: "1pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: "00008",
    couponID: null,
    availableAt: moment("2021-08-11T00:00:00+0900").toDate(),
    exchangeDeadline: moment().add(2, "weeks").startOf("day").toDate(),
    round: 1,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "2pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: "00008",
    couponID: null,
    availableAt: moment("2021-08-11T00:00:00+0900").toDate(),
    exchangeDeadline: moment()
      .add(2, "weeks")
      .startOf("day")
      .add(1, "hour")
      .toDate(),
    round: 2,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "3pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: null,
    couponID: "5hVGViwReDesZwKYlD0E",
    availableAt: moment("2021-08-10T00:00:00+0900").toDate(),
    exchangeDeadline: moment().toDate(),
    round: 1,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "4pF9HWqaRAzd5qQbUTnG",
    uid: "cvN5qBgRzaN7U6aPD3kk19LAGK42",
    itemID: null,
    couponID: "5hVGViwReDesZwKYlD0E",
    availableAt: moment("2021-08-10T00:00:00+0900").toDate(),
    exchangeDeadline: moment().toDate(),
    round: 2,
    isExchanged: false,
    exchangedAt: null,
  },
  {
    key: "5pF9HWqaRAzd5qQbUTnG",
    uid: "IWSvISHeZYY2I0PgAlewd8UoSb63",
    itemID: null,
    couponID: "5hVGViwReDesZwKYlD0E",
    availableAt: moment("2021-08-10T00:00:00+0900").toDate(),
    exchangeDeadline: moment()
      .add(2, "weeks")
      .endOf("day")
      .add(1, "second")
      .toDate(),
    round: 2,
    isExchanged: false,
    exchangedAt: null,
  },
];  
